plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven { url 'https://maven.uuid.gg/releases' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.kosmx.dev/' }
    maven { url 'https://maven.theillusivec4.top/' }
    maven { url "https://cursemaven.com" }
    //maven { url "https://maven.merchantpug.net" }
    maven { url "https://maven.architectury.dev/" }
    maven { url "https://maven.neoforged.net/releases/" }
    maven {
        url = 'https://api.modrinth.com/maven'
        content { includeGroup 'maven.modrinth' }
    }
}

    dependencies {
        //forge "net.minecraftforge:forge:${rootProject.forge_version}"
        neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
        // Remove the next line if you don't want to depend on the API
        modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

        forgeRuntimeLibrary(include("com.ezylang:EvalEx:${rootProject.eval_ex_version}"))
        //modApi("top.theillusivec4.caelus:caelus-forge:${rootProject.forge_caelus_version}")

        modApi(include("com.redpxnda.nucleus:nucleus-core-forge:${rootProject.minecraft_version}+${rootProject.nucleus_core_version}"))
        modApi(include("com.redpxnda.nucleus:nucleus-codec-forge:${rootProject.minecraft_version}+${rootProject.nucleus_codec_version}"))
        modApi(include("com.redpxnda.nucleus:nucleus-config-forge:${rootProject.minecraft_version}+${rootProject.nucleus_config_version}"))
        modApi(include("com.redpxnda.nucleus:nucleus-pose-forge:${rootProject.minecraft_version}+${rootProject.nucleus_pose_version}"))
        modApi(include("com.redpxnda.nucleus:nucleus-facet-forge:${rootProject.minecraft_version}+${rootProject.nucleus_facet_version}"))


        modLocalRuntime files('libs/arsenal-local.jar')
        modLocalRuntime files('libs/archery-local.jar')
        modLocalRuntime files('libs/armory-local.jar')

        if ("${rootProject.run_with_efm}" == "true") {
            modImplementation "curse.maven:epic-fight-mod-405076:5159623"
        } else {
            modCompileOnly "curse.maven:epic-fight-mod-405076:5159623"
        }

        //modCompileOnly "curse.maven:minecolonies-245506:5355518"
        //modCompileOnly "curse.maven:apotheosis-313970:5317303"
        //modCompileOnly "curse.maven:quark-243121:5390424"
        //modCompileOnly "curse.maven:zenith-968868:5254672"
        //modCompileOnly "maven.modrinth:treechop:${rootProject.forge_treechop_version}"

        //modApi files('libs/apoli-forge-1.20.1-2.9.0.4-all.jar')

        if ("${rootProject.run_with_bettercombat}" == "true") {
            //modImplementation "dev.kosmx.player-anim:player-animation-lib-forge:1.0.2-rc1+1.20"
            //modImplementation "curse.maven:bettercombat-639842:5065424"
            //modImplementation "curse.maven:cloth-config-348521:4973441"
        }



        common(project(path: ":common", configuration: "namedElements")) { transitive false }
        shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("META-INF/neoforge.mods.toml") {
            expand "version": project.version
        }
    }

    shadowJar {
        //exclude("architectury.common.json", "architectury.common", "fabric.mod.json")
        exclude "fabric.mod.json"
        exclude "architectury.common.json"

        configurations = [project.configurations.shadowCommon]
        archiveClassifier = "dev-shadow"
    }

    remapJar {
        input.set shadowJar.archiveFile
        dependsOn shadowJar
        archiveClassifier = null
    }

    jar {
        archiveClassifier = "dev"
    }

    sourcesJar {
        def commonSources = project(":common").sourcesJar
        dependsOn commonSources
        from commonSources.archiveFile.map { zipTree(it) }
    }

    components.java {
        withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
            skip()
        }
    }

    tasks.register('githubPublish') {
        finalizedBy ':forge:publish'
        group = 'publishing'

        doLast {
            publishing.publications.mavenForge.groupId = "com.${rootProject.github}"
        }
    }

    publishing {
        publications {
            mavenForge(MavenPublication) {
                artifactId = rootProject.archives_base_name + "-" + project.name
                version = rootProject.mod_version + "-" + rootProject.minecraft_version

                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            maven { url uri(file("$rootDir/build/repository")) }
        }
    }