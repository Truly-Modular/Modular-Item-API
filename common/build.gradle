repositories {
    mavenCentral()
    maven { url 'https://maven.uuid.gg/releases' }
    maven { url 'https://maven.kosmx.dev/' }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.fabricmc.net/' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.terraformersmc.com/' }
    maven { url 'https://www.cursemaven.com' }
    maven { url 'https://maven.ladysnake.org/releases' }
    maven { url 'https://maven.quiltmc.org/repository/release' }
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroupByRegex("software\\.bernie.*")
            includeGroup("com.eliotlash.mclib")
        }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/miapi.accesswidener")
}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury:${rootProject.architectury_version}"

    modApi "com.redpxnda.nucleus:nucleus-core-common:${rootProject.minecraft_version}+${rootProject.nucleus_core_version}"
    modApi "com.redpxnda.nucleus:nucleus-codec-common:${rootProject.minecraft_version}+${rootProject.nucleus_codec_version}"
    modApi "com.redpxnda.nucleus:nucleus-config-common:${rootProject.minecraft_version}+${rootProject.nucleus_config_version}"
    modApi "com.redpxnda.nucleus:nucleus-pose-common:${rootProject.minecraft_version}+${rootProject.nucleus_pose_version}"
    modApi "com.redpxnda.nucleus:nucleus-facet-common:${rootProject.minecraft_version}+${rootProject.nucleus_facet_version}"

    //https://modrinth.com/mod/treechop/version/tIdTnzkf

    modCompileOnly "maven.modrinth:treechop:${rootProject.fabric_treechop_version}"

    //modImplementation files('libs/arsenal-local.jar')
    //modImplementation files('libs/archery-local.jar')
    //modImplementation files('libs/armory-local.jar')

    //modApi files('libs/nucleus-codec-local.jar')
    //modApi files('libs/nucleus-config-local.jar')
    //modApi files('libs/nucleus-core-local.jar')
    //modApi files('libs/nucleus-facet-local.jar')
    //modApi files('libs/nucleus-pose-local.jar')

    modCompileOnly("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modCompileOnly("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modCompileOnly "com.github.apace100:calio:1.13.0"
    modCompileOnly "com.github.apace100:apoli:${project.fabric_apoli_version}"
    //include "com.github.apace100:apoli:${project.fabric_apoli_version}"

    modCompileOnly "dev.latvian.mods:rhino:${rootProject.rhino_version}"
    modCompileOnly "dev.latvian.mods:kubejs:${rootProject.kjs_version}"

    modImplementation "software.bernie.geckolib:geckolib-fabric-1.20.1:${geckolib_version}"

    if ("${rootProject.run_with_bettercombat}" == "true") {
        modImplementation 'dev.kosmx.player-anim:player-animation-lib-fabric:2.0.0-alpha1+1.21'
        modImplementation "curse.maven:bettercombat-639842:6092862"
    } else {
        modCompileOnly 'dev.kosmx.player-anim:player-animation-lib-fabric:2.0.0-alpha1+1.21'
        modCompileOnly "curse.maven:bettercombat-639842:6092862"
    }
    modCompileOnly "maven.modrinth:archers:1.0.6+1.20.1"

    //modImplementation "curse.maven:epic-fight-mod-405076:4785528"

    api "com.ezylang:EvalEx:${rootProject.eval_ex_version}"
}

architectury {
    common("fabric", "neoforge")
}

tasks.register('githubPublish') {
    finalizedBy ':common:publish'
    group = 'publishing'

    doLast {
        publishing.publications.mavenCommon.groupId = "com.${rootProject.github}"
    }
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            version = rootProject.mod_version + "-" + rootProject.minecraft_version

            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven { url uri(file("$rootDir/build/repository")) }
    }
}