plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
}

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

architectury {
    minecraft = rootProject.minecraft_version
}

tasks.register('clean-builds') {
    dependsOn(':fabric:clean')
    doLast {
        println "Cleaned previous build"
    }
}

tasks.register('buildBoth') {
    dependsOn('clean-builds', ':fabric:build')
    group = '_tm_tasks'
    doLast {
        def modVersion = rootProject.mod_version
        def minecraftVersion = rootProject.minecraft_version
        def fabricBuildDir = project(':fabric').file('build/libs')
        //def forgeBuildDir = project(':forge').file('build/libs')
        def fabricJar = fabricBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }
        //def forgeJar = forgeBuildDir.listFiles().find { it.name.endsWith("${modVersion}.jar") }

        if (fabricJar) {
            copy {
                from fabricJar
                into project.file('Merged')
                rename { fileName ->
                    "Truly-Modular-miapi-${modVersion}-${minecraftVersion}-snapshot-fabric.jar"
                }
            }
        }

        /*if (forgeJar) {
            copy {
                from forgeJar
                into project.file('Merged')
                rename { fileName ->
                    "Truly-Modular-miapi-${modVersion}-${minecraftVersion}-snapshot-forge.jar"
                }
            }
        }

         */

        /*
        def cacheDir = file("${gradle.gradleUserHomeDir}/caches/modules-2/files-2.1/${group}/${artifact}/${version}")
        def jarFile = cacheDir.listFiles().find { it.name == jarName }
        if (jarFile) {
            jarFile.delete()
            println "Deleted ${jarName} from the Gradle cache."
        } else {
            println "${jarName} not found in the Gradle cache."
        }
         */

        println "Builds completed"
    }
}

tasks.register('rebuildArsenal') {
    ext.projectName = "arsenal"
    def project = gradle.includedBuild("arsenal")
    dependsOn project.task(":buildBoth")
    group = '_tm_tasks'
    doLast {
        def mergedBuildDir = rootProject.file(ext.projectName + '/Merged')
        println mergedBuildDir
        def fabricJars = mergedBuildDir.listFiles().findAll { it.name.endsWith("fabric.jar") }
        def forgeJars = mergedBuildDir.listFiles().findAll { it.name.endsWith("forge.jar") }

        def fabricJar = fabricJars.max { it.lastModified() }
        def forgeJar = forgeJars.max { it.lastModified() }

        if (forgeJar) {
            copy {
                from forgeJar
                into rootProject.file('forge/libs')
                rename { fileName -> projectName + "-local.jar" }
            }
            copy {
                from forgeJar
                into rootProject.file('Merged')
            }
            copy {
                from forgeJar
                into rootProject.file('common/libs')
                rename { fileName -> projectName + "-local.jar" }
            }
        }
        if (fabricJar) {
            copy {
                from fabricJar
                into rootProject.file('fabric/libs')
                rename { fileName -> projectName + "-local.jar" }
            }
            copy {
                from fabricJar
                into rootProject.file('Merged')
            }
            copy {
                from fabricJar
                into rootProject.file('common/libs')
                rename { fileName -> projectName + "-local.jar" }
            }
        }
        println "Builds Copied"
    }
}
/*
tasks.register('rebuildArchery') {
    ext.projectName = "archery"
    def project = gradle.includedBuild("archery")
    dependsOn project.task(":buildBoth")
    group = '_tm_tasks'
    doLast {
        def mergedBuildDir = rootProject.file(ext.projectName + '/Merged')
        println mergedBuildDir
        def fabricJars = mergedBuildDir.listFiles().findAll { it.name.endsWith("fabric.jar") }
        def forgeJars = mergedBuildDir.listFiles().findAll { it.name.endsWith("forge.jar") }

        def fabricJar = fabricJars.max { it.lastModified() }
        def forgeJar = forgeJars.max { it.lastModified() }

        if (forgeJar) {
            copy {
                from forgeJar
                into rootProject.file('forge/libs')
                rename { fileName -> projectName + "-local.jar" }
            }
            copy {
                from forgeJar
                into rootProject.file('Merged')
            }
            copy {
                from forgeJar
                into rootProject.file('common/libs')
                rename { fileName -> projectName + "-local.jar" }
            }
        }
        if (fabricJar) {
            copy {
                from fabricJar
                into rootProject.file('fabric/libs')
                rename { fileName -> projectName + "-local.jar" }
            }
            copy {
                from fabricJar
                into rootProject.file('Merged')
            }
            copy {
                from fabricJar
                into rootProject.file('common/libs')
                rename { fileName -> projectName + "-local.jar" }
            }
        }
        println "Builds Copied"
    }
}

tasks.register('rebuildArmory') {
    ext.projectName = "armory"
    def project = gradle.includedBuild("armory")
    dependsOn project.task(":buildBoth")
    group = '_tm_tasks'
    doLast {
        def mergedBuildDir = rootProject.file(ext.projectName + '/Merged')
        println mergedBuildDir
        def fabricJars = mergedBuildDir.listFiles().findAll { it.name.endsWith("fabric.jar") }
        def forgeJars = mergedBuildDir.listFiles().findAll { it.name.endsWith("forge.jar") }

        def fabricJar = fabricJars.max { it.lastModified() }
        def forgeJar = forgeJars.max { it.lastModified() }

        if (forgeJar) {
            copy {
                from forgeJar
                into rootProject.file('forge/libs')
                rename { fileName -> projectName + "-local.jar" }
            }
            copy {
                from forgeJar
                into rootProject.file('Merged')
            }
            copy {
                from forgeJar
                into rootProject.file('common/libs')
                rename { fileName -> projectName + "-local.jar" }
            }
        }
        if (fabricJar) {
            copy {
                from fabricJar
                into rootProject.file('fabric/libs')
                rename { fileName -> projectName + "-local.jar" }
            }
            copy {
                from fabricJar
                into rootProject.file('Merged')
            }
            copy {
                from fabricJar
                into rootProject.file('common/libs')
                rename { fileName -> projectName + "-local.jar" }
            }
        }
        println "Builds Copied"
    }
}


 */
subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        //mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-1.21:2024.06.23@zip")
        }

    }
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        maven {
            url "https://maven.fabricmc.net/"
        }
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }

    processResources {
        def expandProps = [
                "version"                   : mod_version,
                "group"                     : project.group, //Else we target the task's group.
                "minecraft_version"         : minecraft_version,
                "architectury_version"      : architectury_version,
                "forge_version"             : forge_version,
                "forge_loader_version_range": forge_loader_version_range,
                "forge_version_range"       : forge_version_range,
                "minecraft_version_range"   : minecraft_version,
                "fabric_api_version"        : fabric_api_version,
                "fabric_loader_version"     : fabric_loader_version,
                "mod_name"                  : mod_name,
                "mod_author"                : mod_author,
                "mod_id"                    : mod_id,
                "mod_description"           : mod_description,
                "credits"                   : credits
        ]

        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
            expand expandProps
        }
    }

    java {
        withSourcesJar()
    }
}

allprojects {
    apply plugin: "java"
}