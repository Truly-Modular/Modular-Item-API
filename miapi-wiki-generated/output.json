{
  "header": "Wiki for 1.20",
  "description": " Welcome to the Wiki for Truly Modular 1.20  \nThis Wiki is structured to help Modpack developers/people who want to add/modify content in Truly Modular via Datapacks\rIt goes in-depth about various Unique things to truly modular, but also over some common Datapack things,\rIt is aimed at all people\r",
  "java": "",
  "data": {},
  "key_words": [],
  "sub_pages": {
    "data_types": {
      "header": "Json Data Types",
      "description": "Json Data Types are re-accuring data types in different jsons and sub structures.",
      "data": {},
      "key_words": [
        "json data types"
      ],
      "sub_pages": {
        "abilities": {
          "sub_pages": {
            "copy_item": {
              "header": "Copy Item Ability",
              "description": " This ability aims to be able to copy any other items right click ability.  \nThis might not work with some items/mods, as if they check for the executing item this will fail\r",
              "java": "common/src/main/java/smartin/miapi/modules/abilities/CopyItemAbility.java",
              "data": {
                "id": "the id of the item to copy from"
              },
              "key_words": []
            }
          }
        },
        "complex": {
          "header": "Complex Number",
          "description": "- complex numbers allow for resolving of complex math equations like sin or log\r  \n- allows for referencing of material related stats via `[material.JSONKEY]`\r  \n- allows for stuff like `5 + sin([material.hardness] + sqrt(9)`\r  \n\r  \n## Resolvers:\r  \n### `collect`\r  \n- allows for subvarients of `add`,`max`,`min`,`average`\r  \n- the variant can all be followed by any other resolver\r  \n- Example [collect.max.material.durability]\r  \n\r  \n### `material`\r  \n- \"[material.someStat]\"\r  \n- reference a defined stat in a material, if a stat is not defined defaults to 0\r  \n- you can see Materials for more info\r  \n\r  \n### `module`\r  \n- \"[module.someStat]\"\r  \n- reference a defined stat in a module, if a stat is not defined defaults to 0\r  \n- module stats are defined via Properties\r  \n\r  \n###  `module-material` / `material-module`\r  \n- `[module-material.durability]` `[material-module.durability]`\r  \n- this will try to first use the first option, and if no specific stat was set will fallback to the second\r  \n\r  \n### `count`\r  \n- `[count.module]` -> total number of modules on the item\r  \n- `[count.submodules]` -> total number of submodules on the item\r  \n- `[count.unique_materials]` -> total number of different materials used on the item\r  \n- `[count.root_material_matches]` -> total number of material used on the whole item matching the current first module with a material\r  \n- `[count.material_matches]` -> total number of material used on the whole item matching the current modules material",
          "data": {},
          "key_words": [
            "complex number",
            "resolvable number",
            "stat resolver"
          ]
        },
        "condition": {
          "header": "Conditions",
          "description": "Conditions allow in a simple way to create complex conditions for certain things to apply\r  \n\r  \nA common use is that ANY json loaded by truly modular supports loading conditions\r  \nthe key \"load_condition\"://actual condition object\r  \ncan be used in any json, this can make files [conditional on other mods](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#mod_loaded)\r  \n\r  \n## Default Structure\r  \n\r  \n```json\r  \n{\r  \n    \"type\": \"condition_type\"\r  \n}\r  \n```\r  \n\r  \n## **Types**\r  \n\r  \n### true\r  \nThis condition is always True no matter what\r  \n\r  \n### not\r  \nThis condition negates a subcondition  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"not\",\r  \n\t\"condition\": {\r  \n\t\t\"type\": \"true\"\r  \n\t}\r  \n}\r  \n```  \r  \n### and\r  \nThis condition has the sub element \"conditions\" witch are a list of any number of conditions. if ALL are true this is conisdered true  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"and\",\r  \n\t\"conditions\": [\r  \n\t\t{\r  \n\t\t\t\"type\": \"not\",\r  \n\t\t\t\"condition\": {\r  \n\t\t\t\t\"type\": \"true\"\r  \n\t\t\t}\r  \n\t\t},\r  \n\t\t{\r  \n\t\t\t\"type\": \"true\"\r  \n\t\t}\r  \n\t]\r  \n}\r  \n```\r  \n### or\r  \nThis condition has the sub element \"conditions\" witch are a list of any number of conditions. if at least one is true this is conisdered true  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"or\",\r  \n\t\"conditions\": [\r  \n\t\t{\r  \n\t\t\t\"type\": \"not\",\r  \n\t\t\t\"condition\": {\r  \n\t\t\t\t\"type\": \"true\"\r  \n\t\t\t}\r  \n\t\t},\r  \n\t\t{\r  \n\t\t\t\"type\": \"true\"\r  \n\t\t}\r  \n\t]\r  \n}\r  \n```\r  \n## Module Specific Conditions\r  \nThese conditions only are able to return true if used in relation to modules\r  \n### parent\r  \nParent Conditions shift the Condition Context to the parent module if applicable, if no parent module is there this is considered false  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"parent\",\r  \n\t\"condition\": {\r  \n\t\t\"type\": \"not\",\r  \n\t\t\"condition\": {\r  \n\t\t\t\"type\": \"true\"\r  \n\t\t}\r  \n\t}\r  \n}\r  \n```\r  \n### child\r  \nChild Conditions shift the Condition Context to the child module if applicable, if no child module is there this is considered false  \r  \nIt is tested on all children and as long as one does return true this is considered true  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"child\",\r  \n\t\"condition\": {\r  \n\t\t\"type\": \"not\",\r  \n\t\t\"condition\": {\r  \n\t\t\t\"type\": \"true\"\r  \n\t\t}\r  \n\t}\r  \n}\r  \n\r  \n```\r  \n### otherModule\r  \nThis Condition shifts the context to all modules on the Item, if the subCondition is true for at least one module this is considered true  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"otherModule\",\r  \n\t\"condition\": {\r  \n\t\t\"type\": \"not\",\r  \n\t\t\"condition\": {\r  \n\t\t\t\"type\": \"true\"\r  \n\t\t}\r  \n\t}\r  \n}\r  \n\r  \n```\r  \n\r  \n### module\r  \nThis Condition tests if the current module has a certain ID, it is best used with some of the conditions above  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"module\",  \r  \n\t\"module\": \"blade_sword\"  \r  \n}\r  \n\r  \n```  \r  \n### material\r  \nThis Condition tests if the current module has a certain material, it is best used with some of the conditions above  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"material\",\r  \n\t\"material\": \"iron\"\r  \n}\r  \n\r  \n```   \r  \n### material  count\r  \nThis Condition tests if the current iteme has a certain amount of modules with a certain material\r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"material_count\",\r  \n\t\"material\": \"iron\",\r  \n        \"count\":5\r  \n}\r  \n\r  \n```  \r  \n### tag\r  \nThis Condition tests if the current module has a certain tag, module-tags are used to simply identify groups of related modules like blades or handles  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"tag\",\r  \n\t\"tag\": \"blade\"\r  \n}\r  \n\r  \n```    \r  \n\r  \n## Other Types\r  \n### advancement\r  \nThis Condition tests if the current assosiated Player has a certain advancement  \r  \nto find the correct Ids the /advancement command is very usefull  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"advancement\",\r  \n\t\"advancement\": \"minecraft:story/enter_the_nether\"\r  \n}\r  \n\r  \n\r  \n```\r  \n\r  \n### Item in Inventory\r  \nThis Condition tests if the current assosiated Player has a amount of items of that type in their inventory\r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"item_in_inventory\",\r  \n\t\"item\": \"minecraft:dirt\",\r  \n        \"count\": 5\r  \n}\r  \n\r  \n\r  \n```\r  \n### mod_loaded\r  \nThis Condition tests another mod is loaded. this is usually used as a loadCondition for optional jsons  \r  \nas mod the mod ID of the other mod is used  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"mod_loaded\",\r  \n\t\"mod\": \"bettercombat\"\r  \n}\r  \n\r  \n```",
          "data": {},
          "key_words": [
            "condition",
            "conditions"
          ]
        },
        "properties": {
          "header": "Properties",
          "description": "- Properties are responsible for providing modules with effects, statistics, and other attributes.\r  \n- The API includes an extensive selection of properties.\r  \n- Full list of included properties can be found [here](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List).\r  \n- Addons can register their properties if so desired. It is adviced for addons to use ModID_property name to avoid collisions  \r  \n  They need to register like seen in the [RegistryInventory](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/registries/RegistryInventory.java)\r  \n- Each property has its own way of handling JSON components, witch can be viewed in their Java class",
          "data": {},
          "key_words": [
            "property",
            "properties"
          ],
          "sub_pages": {
            "old_list": {
              "header": "Old Properties List",
              "description": "Default Property Types:\r  \n# Property Types;\r  \n## Double Property\r  \n- Double Properties consist of a complex number. They have the full capabilities like a Attribute has\r  \n- allowed jsons include\r  \n    - `\"propertyKey\":5`\r  \n    - `\"propertyKey\":\"5\"`\r  \n    - `\"propertyKey\":\"5*20*[material.density]\"`\r  \n    - `\"propertyKey\":{\r  \n      \"operation\": \"**\",\r  \n      \"value\": \"0.5\"\r  \n      }`\r  \n    - `\"propertyKey\":true` -> this is equivalent to 1\r  \n- They are resolved like attributes, so first everything gets added, then all multipliers with \"*\" as Operation are added together, then all Multipliers with \"**\" are used to multiply the result.\r  \n## Boolean Property\r  \n- behaves like a double Property, it is considered true if the total value is above 0\r  \n\r  \n# Full Property List\r  \n\r  \n## Esential Properties for Modules\r  \n\r  \n### Name Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/NameProperty.java)\r  \n- Key: `name`\r  \n- This property is a String.\r  \n- This property is REQUIRED on each module\r  \n- Example :\r  \n  `\"name\": \"blade_dagger\",`\r  \n\r  \n### Slot Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/SlotProperty.java)\r  \n- Key: `slots`\r  \n- Example :\r  \n  `\"slots\": {\r  \n  \"0\": {\r  \n  \"allowed\": [\"sword_blade\",\"sword_blade_small\",\"sword_blade_large\"],\r  \n  \"transform\": {\"rotation\": {\"x\": 0.0, \"y\": 0.0, \"z\": 0.0}, \"translation\": {\"x\": 3.0, \"y\": 3.0, \"z\": 0.0},\"scale\": {\"x\": 1.0, \"y\": 1.0, \"z\": 1.0}}\r  \n  }\r  \n  },`\r  \n- this Property manages allowed submodules. its a Map by slotId(a Integer)\r  \n- Each moduleSlot has a List of allowed modules and a transform from the local position\r  \n\r  \n### Allowed Slots Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/AllowedSlots.java)\r  \n- Key: `allowedInSlots`\r  \n- Example :\r  \n  `    \"allowedInSlots\": [\"sword_guard\",\"polearm_blade\"],`\r  \n- This Property is a JSON array\r  \n- This is a List of Strings that Modules' Slots can allow for\r  \n\r  \n### Allowed Material Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/AllowedMaterial.java)\r  \n- Key: `allowedMaterial`\r  \n- This property is a JSON Object.\r  \n- Example :\r  \n  `    \"allowedMaterial\": {\r  \n  \"allowedMaterials\": [\r  \n  \"wood\",\r  \n  \"stone\",\r  \n  \"metal\",\r  \n  \"crystal\"\r  \n  ],\r  \n  \"cost\": 1\r  \n  },`\r  \n- the JSON key allowedMaterials is a List of allowed material keys/material group names.\r  \n- the Cost key is a number and describes how much of that material is needed.\r  \n\r  \n# Render/Model Related Properties\r  \n\r  \n### Model Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/render/ModelProperty.java)\r  \n- Key: `texture`\r  \n- This Property is a list of Models.\r  \n- Each Model is built with the following subproperties\r  \n    - path : The Path to the Model.json this should be in miapi:, because the model needs to be already loaded and miapi loads all models in its directories. This can be any [Java Block/Item Model](https://web.blockbench.net/)\r  \n    - transform : a Tranform (position, rotation and scale data of the model\r  \n    - id : Optional - an ID to identify this model for other actions\r  \n    - color_provider : allows for different Color Providers. They color the model. Allows for \"material\", \"model\", \"potion\" and \"parent\"\r  \n    - trim_mode : Optional - defaults to nono - Determines if Trims are applied to this item. allows for \"armor_layer_one\", \"armor_layer_two\", \"item\".\r  \n    - entity_render : Optional, default false. If true the model will be rendered from both sides\r  \n    - condition : Optional - defaults to 1. This is a complex number, if this is resolves 0 the model wont be rendered\r  \n\r  \n\r  \n### Model Overly Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/render/OverlayModelProperty.java)\r  \n- Key: `overlay_texture_model`\r  \n- This Property is a list of Overlays Models.\r  \n- Each Model is built with the following subproperties\r  \n    - texture : The Path to the texture to overlay to the model\r  \n    - modelTargetType : the type of identification used to target models. This can target Models from all modules. allows for \"id\" and \"path\"\r  \n    - modelTargetInfo : A Regex match for either id or path of the model\r  \n    - colorProvider : allows for \"this\"(uses this material as a colorProvider) and \"other\" using the targets colorProvider. also allows for all other\r  \n      color_providers from the ModelProperty\r  \n    - priority : A way to order overlays, lower ones are applied first\r  \n\r  \n# Ability Properties\r  \nAbilities control Right Click behaviour of an Item\r  \n\r  \n### Ability Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/AbilityProperty.java)\r  \n- Key: `abilities`\r  \n- This Property is a List of String keys, it order determines the Order of Right Click Abilites\r  \n- Abilities set higher are tried first, f.e. `abilities:[        \"axe_ability\", \"throw\"]` this would use an axes Strip ability, but if not targeting anything it will try to throw the item instead\r  \n\r  \n### Block Ability Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/BlockProperty.java)\r  \n- Key: `blocking`\r  \n- This Property is a [complex Number](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#complex-numbers)\r  \n- Its main use is for scaling the Block Ability\r  \n\r  \n### Edible Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/EdibleProperty.java)\r  \n- Key: `edible`\r  \n- This Property allows the modular item to be eaten. Make sure to add \"eat\" to the abilities property.\r  \n- It is a JSON object that can define the following:\r  \n    * `hunger`: The amount of hunger to receive from consuming the item as a [complex number](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#complex-numbers)\r  \n    * `saturation`: The amount of saturation to receive from consuming the item as a [complex number](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#complex-numbers)\r  \n    * `eatingSpeed`: (optional) A multiplier for how fast the item should be eaten as a [complex number](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#complex-numbers)\r  \n    * `durability`: (optional) defaults to 0 (if 0 the item will be consumed.) positive values detract durability on eat [complex number](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#complex-numbers)\r  \n    * `alwaysEdible`: (optional) Whether the item is always edible(can be eaten at full hunger)\r  \n    * `effects`: (optional) A list of status effects to receive from consuming the item - each entry in the list consists of the following keys:\r  \n        * `effect`: The id of the status effect. F.E. \"minecraft:resistance\"\r  \n        * `duration`: How long the potion effect lasts, in ticks\r  \n        * `amplifier`: The amplifier of the potion effect(starting at 0)\r  \n        * `ambient`: (optional) Whether the potion effect is ambient\r  \n        * `showParticles`: (optional) Whether to show the potion effect's particles\r  \n        * `showIcon`: (optional) Whether to show the potion effect's icon(?)\r  \n- Example:\r  \n```\r  \n  {\r  \n    \"abilities\": [\"eat\"],\r  \n    \"edible\": {\r  \n      \"hunger\": 5,\r  \n      \"saturation\": 3.8,\r  \n      \"eatingSpeed\": 0.5,\r  \n      \"durability\": -5,\r  \n      \"alwaysEdible\": true,\r  \n      \"effects\": [\r  \n        {\r  \n          \"effect\": \"minecraft:hunger\",\r  \n          \"duration\": 40,\r  \n          \"amplifier\": 0\r  \n        }\r  \n      ]\r  \n    }\r  \n  }\r  \n```\r  \n\r  \n\r  \n# Projectile Related Property\r  \n\r  \n\r  \n### Airdrag Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/AirDragProperty.java)\r  \n- Key: `air_drag`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#complex-numbers)\r  \n- This Property scales how fast a Projectile looses Speed in air, needs to be between 0 and 1, values above 1 dont lose any speed.\r  \n\r  \n### Waterdrag Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/WaterDragProperty.java)\r  \n- Key: `water_drag`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#complex-numbers)\r  \n- This Property scales how fast a Projectile looses Speed in Water, needs to be between 0 and 1, values above 1 dont lose any speed.\r  \n\r  \n\r  \n### WaterGravity Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/WaterGravityProperty.java)\r  \n- Key: `water_gravity`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#complex-numbers)\r  \n- This Property scales how heavy a Player is considered under water and how fast he sinks\r  \n\r  \n### Arrow Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/ArrowProperty.java)\r  \n- Key: `is_arrow`\r  \n- This Property is a [Boolean Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/#boolean-property)\r  \n- This Property determines if a Projectile is internally treated like an arrow or thrown Item, this changes some damage calculations\r  \n\r  \n### IsCrossbow Projectile Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/IsCrossbowShootAble.java)\r  \n- Key: `crossbowAmmunition`\r  \n- This Property is a [Boolean Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/#boolean-property)\r  \n- If true lets Item be shot as a Crossbow Projectile\r  \n\r  \n### Enderpearl Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/EnderpearlProperty.java)\r  \n- Key: `is_enderpearl`\r  \n- This Property is a [Boolean Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/#boolean-property)\r  \n- If true lets Projectiles behaves like an Enderpearl on impact, teleporting the player\r  \n\r  \n\r  \n### Teleport Target Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/TeleportTarget.java)\r  \n- Key: `teleport_target`\r  \n- This Property is a [Boolean Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/#boolean-property)\r  \n- If true lets Projectiles teleports the entity hit by this like it has eaten a Chorus Fruit\r  \n\r  \n# Enchantment Related Properties\r  \n\r  \n### Allowed Enchants Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/EnchantmentProperty.java)\r  \n- Key: `enchantments`\r  \n- This Property is a List of allowed or Forbidden Enchants\r  \n- Example `\"enchantments\":\"allowed:\"[\"minecraft:sharpness\",\"minecraft:protection\"]`\r  \n- Alows for `allowed` and `forbidden` respectively\r  \n- This Property determines if an Enchantment can be put onto an Item\r  \n\r  \n### Crafting Enchants Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/CraftingEnchantProperty.java)\r  \n- Key: `crafting_enchants`\r  \n- This Property will enchant the Item on Craft with those Enchantments, if the Item allows for this Enchantment\r  \n- This Property is a Map of Enchantment Identifiers\r  \n- Example `\"crafting_enchants\":{\"minecraft:sharpness\":5,\"minecraft:protection\":3}`\r  \n- Respects [This](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List#allowed-enchants-property)\r  \n\r  \n### EnchantmentTransformer Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/EnchantmentTransformerProperty.java)\r  \n- Key: `enchantment_transformerst`\r  \n- This Property will adjust existing enchantments to your liking, if multiple transformers are applied on one item they will transform in order\r  \n- Unlike previous \"fake_enchant\" property this has no native gui represenation, we recommend the usage of the gui stat property\r  \n- Example\r  \n```\r  \n{  \r  \n    \"enchantment_transformers\": [  \r  \n        {  \r  \n            \"enchantment\": \"minecraft:sharpness\",  \r  \n            \"level\": \"[old_level]+5\"  \r  \n        },  \r  \n        {  \r  \n            \"enchantment\": \"minecraft:efficiency\",  \r  \n            \"level\": \"[old_level]*2\"  \r  \n        },  \r  \n        {  \r  \n            \"enchantment\": \"minecraft:fire_aspect\",\r  \n            \"level\": \"ceil([old_level]/3)\"\r  \n        }  \r  \n    ]  \r  \n}\r  \n```\r  \n- Respects [This](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List#allowed-enchants-property)\r  \n\r  \n# Other Properties\r  \n\r  \n### Attribute Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/AttributeProperty.java)\r  \n- Key: `attributes`\r  \n- this is a fairly complex Property that aims to allow the setting of any Attribute.\r  \n- It is a JSON array of individual Properties\r  \n- each entry in the array has the following Properties\r  \n    * `attribute` : this is the Identifier of the Attribute in question. this is required\r  \n    * `value` : this is a [complex Number](https://github.com/Truly-Modular/Modular-Item-API/wiki/Complex-Number) and the value of the Attribute . this is required\r  \n    * `operation` : This is the Operation used. allowed values are `+`,`*`,`**`. this is required\r  \n    * `slot` : The slot in witch the attribute should be active. this is required\r  \n    * `target_operation` : the Target Operation to merge to\r  \n    * use the following only together and if you know what you are doing, uuid should be used for Attackdamage and Attackspeed to be green\r  \n        * `uuid` : the UUID of the attribute. Same UUID without `seperateOnItem = true' will be merged into a single add on the Item this is optional\r  \n        * `seperateOnItem` : a Boolean value, defaults to false. if set to true this Entry will be listed seperatly on the Item\r  \n\r  \n### Armor Penetration Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/EquipmentSlotProperty.java)\r  \n- Key: `armor_pen`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/_edit#double-property)\r  \n- This Property is ingame scaled with a limited growth function so high values don't get ridiculous.\r  \n\r  \n\r  \n### Crafting Condition Property Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/CraftingConditionProperty.java)\r  \n- Key: `crafting_condition`\r  \n- this property contains 3 Conditions:\r  \n    * (_optional_ <default: none>) `visible`: ([Condition](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#conditions)) if this module should be showen in the Crafting UI\r  \n    * (_optional_ <default: none>) `craftable`: ([Condition](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#conditions)) if this module should be clickAble in the Crafting UI\r  \n    * (_optional_ <default: none>) `on_craft`: ([Condition](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#conditions)) if this module should be Craftable in the Crafting UI\r  \n\r  \n### Channeling Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/ChannelingProperty.java)\r  \n- Key: `channeling`\r  \n- This Property is a [Boolean Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/#boolean-property)\r  \n- If true lets Projectiles summon lightning on Impact like if it was enchanted with Channeling\r  \n\r  \n### Cryo Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/CryoProperty.java)\r  \n- Key: `cryo`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/#double-property)\r  \n- This Property applies Cryo on ArrowHit if it is on the arrow. The higher the value, the longer and higher the applied Cryo effect is.  \r  \n  For details check the Java implementation\r  \n\r  \n### Display Name Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/DisplayNameProperty.java)\r  \n- Key: `displayName`\r  \n- This Property is a simple String containing the Language key for the Items Displayname\r  \n\r  \n### Durability Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/DurabilityProperty.java)\r  \n- Key: `cryo`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/#double-property)\r  \n- This Property determines the total Durability of the Item\r  \n\r  \n### Emissive Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/EmissiveProperty.java)\r  \n- Key: `emissive`\r  \n- This Property determines the light than a module will render with. In Minecraft, the light an item renders with is determined by two values: sky and block light. Sky light is the amount of light the sky is shining on the item(0-15), and block light is the amount of light being shined by nearby light sources(a torch, for example).\r  \n- Set to \"true\" to always render this module/material with full light. Set as an object with \"sky\" and \"block\" keys to individually determine each light value. -1 will make that value have no effect and use the normal light instead.\r  \n- Example:\r  \n```\r  \n  {\r  \n    \"emissive\": {\r  \n      \"sky\": 15,\r  \n      \"block\": -1\r  \n    }\r  \n  }\r  \n```\r  \n\r  \n### Equipmentslot Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/ArmorPenProperty.java)\r  \n- Key: `equipmentSlot`\r  \n- This Property is a Simple String Property\r  \n- Example: `\"equipmentSlot\":\"helmet\"`\r  \n- This Property should make the Item Equipable on the Equipment Slot. Its heavily recommneded to use an ItemId that is allowed on that slot as well\r  \n\r  \n\r  \n### Fake Item Tag\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/FakeItemTagProperty.java)\r  \n- Key: `fake_item_tag`\r  \n- This Property is a List if Tag Identifiers\r  \n- It tries to fake the Item tag onto the Item. This might cause issues with certain tags or mods and might not be detected Correctly\r  \n\r  \n### FireProof Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/FireProof.java)\r  \n- Key: `fireProof`\r  \n- This Property is a [Boolean Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/#boolean-property)\r  \n- if set to true items wont burn and behave like Netherite Items\r  \n\r  \n### Food Exhaustion\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/ExhaustionProperty.java)\r  \n- Key: `food_exhaustion`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/_edit#double-property)\r  \n- this property introduces a passive Food Drain onto the Player if a Item with this is worn\r  \n\r  \n### Fortune Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/FortuneProperty.java)\r  \n- Key: `fortune`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/_edit#double-property)\r  \n- this property increases the Fortune Level of the Item by its rounded value\r  \n\r  \n### Fracturing Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/FortuneProperty.java)\r  \n- Key: `fracturing`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/_edit#double-property)\r  \n- this property increases Damage the lower Durability is\r  \n\r  \n### Gui Stat Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/GuiStatProperty.java)\r  \n- Key: `gui_stat`\r  \n- This Property is a map of numbers to additionally display in the gui.\r  \n- if two modules share the same key their numbers can be compared with each other\r  \n- Example:\r  \n```\r  \n{\r  \n    \"gui_stat\": {\r  \n        \"ht_treechop_gui\": {\r  \n            \"value\": \"ceil( min(200,(([material.mining_level] + [material.hardness] / 10 ) ^ 3 + 2))-0.5)\",\r  \n            \"min\": 0,\r  \n            \"max\": 20,\r  \n            \"header\": {\r  \n                \"translate\": \"miapi.arsenal.tree_mining\"\r  \n            },\r  \n            \"description\": {\r  \n                \"translate\": \"miapi.arsenal.tree_mining.description\"\r  \n            }\r  \n        }\r  \n    }\r  \n}\r  \n```\r  \n\r  \n### Health Percentage Damage Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/HealthPercentDamage.java)\r  \n- Key: `healthPercent`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/_edit#double-property)\r  \n- this property increases Damage scaled with the current Health of the Target\r  \n\r  \n### IllagerBane Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/IllagerBane.java)\r  \n- Key: `illagerBane`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/_edit#double-property)\r  \n- this property increases Damage to illagers and other raid related Mobs\r  \n\r  \n### Immolate Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/ImmolateProperty.java)\r  \n- Key: `immolate`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/_edit#double-property)\r  \n- this property burns the holder, the target and so on (This will get reworked soon)\r  \n\r  \n### IsPiglinGold Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/IsPiglinGold.java)\r  \n- Key: `isPiglinGold`\r  \n- This Property is a [Boolean Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/#boolean-property)\r  \n- If set to true Piglins wont attack people wearing this as a Armor Module\r  \n\r  \n### ItemId Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/ItemIdProperty.java)\r  \n- Key: `itemId`\r  \n- This Property is a simple Identifier String\r  \n- Any string here needs to be registered in Java and all defaults can be seen [here](https://github.com/Truly-Modular/Modular-Item-API/blob/e7b07ae43a970a74b13fbc9d4fc15888f99a6114/common/src/main/java/smartin/miapi/registries/RegistryInventory.java#L242)\r  \n\r  \n### Item Lore Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/compat/LoreProperty.java)\r  \n- Key: `itemLore`\r  \n- This Property allows for a list Item Lores.\r  \n- The \"position\" element can be \"top\" or \"bottom\". Top appears under item name, bottom appears above the advanced tooltip section.\r  \n- The \"priority\" element is optional, defaulting to 0. Lower numbers will make this appear above other text, higher numbers will make it appear below other text.\r  \n- The \"text\" element allows for [this](https://minecraft.wiki/w/Formatting_codes#Use_in_custom_language_packs)\r  \n- Example:\r  \n```\r  \n{\r  \n    \"itemLore\": [{\r  \n      \"position\" : \"top\",\r  \n      \"text\" : \"TextElement\"\r  \n    }]\r  \n  }\r  \n```\r  \n\r  \n### Leeching Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/LeechingProperty.java)\r  \n- Key: `leeching`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/_edit#double-property)\r  \n- this is a basic lifesteel property\r  \n\r  \n\r  \n### Luminous Learning Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/LuminousLearningProperty.java)\r  \n- Key: `luminiousLearning`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/_edit#double-property)\r  \n- this property increases Xp Drops from Blocks and Drops\r  \n\r  \n### Mining Level Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/MiningLevelProperty.java)\r  \n- Key: `mining_level`\r  \n- This Property manages the Mining level\r  \n- it is a map `mining_level:{\"axe\":\"[material.mining_level]\"}`\r  \n\r  \n\r  \n### Module Stats Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/ModuleStats.java)\r  \n- Key: `module_stats`\r  \n- This Property supplies stats that are similar to material stat, reachable by \"[module.custom_stat]\"\r  \n- The idea is to give Synergies and Material Properties some guidance on for stats\r  \n- Same with the Material stats, if a stat is not set it defaults to 0\r  \n- For Obvious reasons of self reference no complex Numbers are allowed here\r  \n- the property is a simple JSON Map\r  \n- \"[module.cost]\" will always be redirected to the cost of the [AllowedMaterials property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List#allowed-material-property)\r  \n- Example:\r  \n```\r  \n{\r  \n    \"module_stats\": {\r  \n        \"gem_size\": 1,\r  \n        \"power\": 5\r  \n    }\r  \n  }\r  \n```\r  \n\r  \n### Module Tag Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/TagProperty.java)\r  \n- Key: `tag`\r  \n- This Property is a List of String Tags. Its main use is to easily Identify groups of modules for synergies and other behaviour tweaks\r  \n\r  \n\r  \n### Pillagers Guard Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/PillagesGuard.java)\r  \n- Key: `pillagerGuard`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/_edit#double-property)\r  \n- this property decreases Damage from Pillagers and other Raid related Mobs\r  \n\r  \n### Priority Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/PillagesGuard.java)\r  \n- Key: `priority`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/_edit#double-property)\r  \n- this property determins the Ordering in the GUI, lower Prio is sorted Higher\r  \n\r  \n### Rarity Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/RarityProperty.java)\r  \n- Key: `rarity`\r  \n- This Property allows you to set custom rarities, by default \"common\",\"uncommon\",\"rare\",\"epic\", they are white, yellow,aqua and light purple respectivly\r  \n\r  \n### RepairPriority Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/RepairPriority.java)\r  \n- Key: `repairPriority`\r  \n- This Property is a [Double Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/_edit#double-property)\r  \n- this property manages witch modules are allowed to contribute to the Repair Material, lower number means higher prio, all modules with the same number are allowed\r  \n\r  \n### Riptide Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/RiptideProperty.java)\r  \n- Key: `riptide`\r  \n- This Property manges Riptide behaviour, to enable Riptide also use \"riptide\" in the Ability Property\r  \n- for an example look at the [Trident Modules](https://github.com/Truly-Modular/Arsenal/blob/0b98028590df16236a3e497baaa68062572090aa/common/src/main/resources/data/miapi/modules/blade/blade_trident.json#L94)\r  \n\r  \n### Snow Walk Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/CanWalkOnSnow.java)\r  \n- Key: `canWalkOnSnow`\r  \n- This Property is a [Boolean Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/#boolean-property)\r  \n- if set to true and on Boots the player can walk over powdered snow like if hes wearing leather boots\r  \n\r  \n### ToolOrWeaponProperty Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/ToolOrWeaponProperty.java)\r  \n- Key: `isWeapon`\r  \n- This Property is a [Boolean Property](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List/#boolean-property)\r  \n- If set to true the Item will behave more like a Weapon(loose 2 dura on blockbreak, one on hitting sth, if false the reverse is true)\r  \n\r  \n\r  \n# Compat Properties\r  \n\r  \n### ApoliPower Property\r  \n- [java](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/modules/properties/compat/ApoliPowersProperty.java)\r  \n- Key: `apoli_powers`\r  \n- This Property allows for a list of apoli Powers.\r  \n- Uses [Apolis itemModifiers](https://origins.readthedocs.io/en/1.8.1/misc/item_modifiers/apoli/add_power/) system to decode without the need to define a function\r  \n- Example:\r  \n```\r  \n{\r  \n    \"apoli_powers\": [{\r  \n      \"powerId\" : \"origins:fall_immunity\",\r  \n      \"slot\" : \"mainhand\",\r  \n      \"isHidden\" : false,\r  \n      \"isNegative\" : false\r  \n    }]\r  \n}\r  \n```",
              "data": {},
              "key_words": [
                ""
              ]
            }
          }
        }
      }
    },
    "attributes": {
      "header": "Attributes",
      "description": "Miapi Implements a couple of custom attributes.\r  \nSome of them will only work on Modular Items, so using them outside of Modular Items is not recommended.\r  \n\r  \n# Melee/basic Attributes\r  \n\r  \n### Range/Reach attributes\r  \n- `miapi:generic.reach` and `miapi:generic.attack_range` exist as cross loader range and reach attributes. these attributes dont actually exist, but will be either resolved to `forge:block_reach` or `reach-entity-attributes:reach` for fabric\r  \n\r  \n### Mining Speed Attributes\r  \n- `miapi:generic.mining_speed.pickaxe`, `miapi:generic.mining_speed.axe`, `miapi:generic.mining_speed.shovel`, `miapi:generic.mining_speed.hoe` exist to easier adjust the miningspeed of modular items. This might be reworked later into Double Properties\r  \n- Only works on Modular Items\r  \n\r  \n### Backstab attribute\r  \n- `miapi:generic.back_stab` This attributes increases Damage on Backstab of Melee Attacks. +2 Will increase the damage by 2, +100% will double the Damage dealt\r  \n\r  \n### Armor Crushing attribute\r  \n- `miapi:generic.armor_crushing` This attributes increases Durability Damage done to armor. It is currently unused\r  \n\r  \n### Shield Break attribute\r  \n- `miapi:generic.shield_break` This Attributes value is the amount of seconds a Shield gets disabled when hit.\r  \n\r  \n### Item Use Speed attribute\r  \n- `miapi:generic.player_item_use_speed` This Attributes controls how fast the Player is moving while using an Item(right clicking)\r  \n- this will be reworked soon! dont use this at the moment\r  \n\r  \n### Magic Damage attribute\r  \n- `miapi:generic.magic_damage` This Attributes deals additional magic Damage on hit.\r  \n\r  \n### Critical Damage attribute\r  \n- `miapi:generic.crit_damage` This Attributes incrases Critical Hit Damage. +2 will increase the Damage by 2, +100% will move the the Damage on Criticals from 150% to 250%.\r  \n\r  \n### Critical Chance attribute\r  \n- `miapi:generic.crit_chance` This attribute sets the chance for a Random Critical hit.\r  \n\r  \n\r  \n# Projectile Attributes\r  \n### Bow Draw Time attribute\r  \n- `miapi:generic.bow_draw_time` controls the Bow Draw time, is in Ticks\r  \n- works on Bows/Crossbows\r  \n- Only works on Modular Items\r  \n### Projectile Damage attribute\r  \n- `miapi:generic.projectile_damage` controls the base Damage of Projectiles, most projectiles also use their current speed in total Damage calculation\r  \n- Works on Projectiles\r  \n- Only works on Modular Items\r  \n### Projectile Speed attribute\r  \n- `miapi:generic.projectile_speed` controls the Projectiles Speed.\r  \n- Works on Bows/Crossbows and Projectiles\r  \n- Only works on Modular Items\r  \n### Projectile Accuracy attribute\r  \n- `miapi:generic.projectile_accuracy` controls the Accuracy of the Projectile\r  \n- Works on Bows/Crossbows and Projectiles\r  \n- Only works on Modular Items\r  \n### Projectile Piercing attribute\r  \n- `miapi:generic.projectile_piercing` allos Projectiles to pierce one entity like the Piercing Enchantmant\r  \n- Works on Projectiles\r  \n- Only works on Modular Items\r  \n### Critical Multiplier attribute\r  \n- `miapi:generic.projectile_crit_multiplier` by default arrows do 1.5x damage when Critical. Arrows are critical if the Bow was fully drawn or shot by Crossbow.\r  \n- Works on Projectiles\r  \n- Only works on Modular Items\r  \n\r  \n# Armor Attribtues\r  \n\r  \n### Ressistance attribute\r  \n- `miapi:generic.resistance` the value of this attribute is % of blank damage removed. so a value of 80 will result in a 80% damage reduction.\r  \n  This attributes main use is as a internal way to implement the blockings damage reduction.\r  \n\r  \n### Swim Speed\r  \n- `miapi:generic.swim_speed` On forge this resolved to `forge:generic.swim_speed`\r  \n\r  \n### Projectile Armor attribute\r  \n- `miapi:generic.projectile_armor` Works like Normal Armor, but only works against Projectiles. This is used by Crafted Chainmail Armor\r  \n\r  \n### Shielding Armor attribute\r  \n- `miapi:generic.projectile_armor` Works similar to Absorption, but only works against physical Attacks and regenerates while out of Combat\r  \n\r  \n## Elytra Attributes\r  \n\r  \n### Elytra Turn Effiency attribute\r  \n- `miapi:generic.elytra_turn_efficiency` Controls how much speed an elytra looses while turning. Higher loses less speed\r  \n\r  \n### Elytra Glide Effiency attribute\r  \n- `miapi:generic.elytra_glide_efficiency` Controls how much speed an elytra looses while not turning. Higher loses less speed",
      "data": {},
      "key_words": [
        "attribute",
        "attributes"
      ]
    },
    "datapack_data_types": {
      "header": "Data Types",
      "description": "Data Types concerns the different types of json miapi can load and the following articles explain their use and structure.\r  \nAll jsons for miapi can have the field\r  \n`load_condition` to prevent their loading. this condition is evaluated on reload on the server.\r  \nsee Conditions for more details",
      "data": {},
      "key_words": [
        "datapack data_types",
        "datapack"
      ],
      "sub_pages": {
        "converter": {
          "header": "Modular Converters",
          "description": "- a seperate JSON found in miapi/modular_converter\r  \n- used to convert other items into modular Items\r  \n- Examples of Modular Converters can be found [here](https://github.com/Truly-Modular/Arsenal/tree/master/arsenal-common/src/main/resources/data/miapi/modular_converter).",
          "data": {},
          "key_words": [
            "modular converter",
            "converter"
          ]
        },
        "create": {
          "header": "Create Options",
          "description": "- a seperate JSON found in miapi/create_options\r  \n- Gives create options on the Plus button in the GUI\r  \n- Examples of Create Options can be found [here](https://github.com/Truly-Modular/Arsenal/tree/master/arsenal-common/src/main/resources/data/miapi/create_options).",
          "data": {},
          "key_words": [
            "create options",
            "create option"
          ]
        },
        "modules": {
          "header": "Materials",
          "description": "- a seperate JSON found in miapi/materials\r  \n- The API offers a diverse range of materials.\r  \n- Materials are loosely defined JSON files that serve as references for module statistics.\r  \n- Materials need to be added to data/miapi/materials/anyPathOrNameFromHere.json\r  \n- Full list of materials can be found [here](https://github.com/Truly-Modular/Modular-Item-API/tree/main/common/src/main/resources/data/miapi/materials).\r  \n- In addition Materials are generated at Runtime to increase Mod-Compatibility\r  \n\r  \n\r  \nJsonMaterials is a file format used to define materials within the mod.\r  \nThese materials can have various stats such as hardness, density, flexibility, etc.,\r  \n# Required Fields\r  \n### `key`\r  \nthe unqiue id name of a Material. If you are adding materials from another mod, use modid:materialID here.\r  \n### `translation`\r  \nThe language key of the material, points to the language file.\r  \n### `icon`\r  \nthe Icon of the Material, can either be the path to a texture or a more complex icon, for that see [this](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/resources/data/miapi/materials/glass/black_glass.json#L4) as an example\r  \n### `color`\r  \nThe Hex color of the Material. Please use RGB and NOT RGBA here.\r  \n# Optional Fields\r  \n## Module Stats\r  \nModule stats is a weird subcategory.\r  \nAny open key can be used to define a Modulestat, such as ` hardness` or ` mining level` , for [Example](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/resources/data/miapi/materials/glass/black_glass.json#L4) these can be dynamicly called from by calling [material.hardness] in a complex double as reference.\r  \n\r  \n### `groups`\r  \na list of group keys. by default `stone` `wood` `metal` `bone` `glass` `fabric` `crystal` `gemstone` `flint` `rod` `fletching` `smithing` are used\r  \n### `items`\r  \nA List of Items to create the Material, can either be \"item\", \"tag\" or \"ingredient\". requires also a \"value\" to define the value in relation to the cost of the modules.\r  \n### `properties`\r  \nThis is a complex field . It has subfield sorted by key. Those keys can be referenced by Modules to search for Material Properties. Default keys include `default`  \r  \n`handheld` `tool` `blade`  `head`  `axe` `pickaxe` `hammer` `hoe` `shovel`\r  \n`armor` `helmet` `chest` `pants` `boots`\r  \n\r  \nAfter the respective key a property map can be added to apply additional properties if this material is used on a matching Module.\r  \n\r  \n# Color Palette\r  \nColor Palettes should be defined for all actual materials, and they need to be under the key `color_palette`\r  \nThey can have different Types:\r  \n### `grayscale_map`\r  \nThis is a Map where brigthness values of the raw texture are mapped to direct color values. [Example](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/resources/data/miapi/materials/glass/black_glass.json#L17)\r  \n### `from_material_palette_image`\r  \nThis is a Map where brigthness values of the raw texture are mapped to direct color values. Unlike the grayscale_map this uses a 1x256 texture to remap instead [Example](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/resources/data/miapi/materials/stone/magma.json#L17)\r  \n### `image_generated`\r  \nThis requires the json to mention a texture and this texture will be used to generate a palette similar to how generated Materials work.\r  \n```json\r  \n\"color_palette\": {\r  \n    \"type\": \"image_generated\",\r  \n    \"atlas\": \"block\",\r  \n    \"texture\": \"minecraft:block/dirt\"\r  \n}\r  \n```\r  \n### `image_generated_item`\r  \nThis requires the json to mention a valid ItemId. This might be easier to use than the option above\r  \n```json\r  \n\"color_palette\": {\r  \n    \"type\": \"image_generated_item\",\r  \n    \"item\": \"minecraft:dirt\"\r  \n}\r  \n```\r  \n### `overlay_texture`\r  \nThis overlays a Texture over the existing Model, allowing for cooler looking custom motives. Well repeating texures are recommended. [Example](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/resources/data/miapi/materials/stone/sculk.json#L17)\r  \n\r  \n### `layered_mask`\r  \nThis mask between two other Color Palettes via a Texture. Example:\r  \n```json\r  \n\"color_palette\": {\r  \n    \"type\": \"layered_mask\",\r  \n    \"base\": {\r  \n        \"type\": \"grayscale_map\",\r  \n        \"colors\": {\r  \n            \"24\": \"2D0500\",\r  \n            \"68\": \"4A0800\",\r  \n            \"107\": \"720C00\",\r  \n            \"150\": \"720C00\",\r  \n            \"190\": \"BB2008\",\r  \n            \"255\": \"E32008\"\r  \n        }\r  \n    },\r  \n    \"layer\": {\r  \n        \"type\": \"grayscale_map\",\r  \n        \"colors\": {\r  \n            \"24\": \"002d00\",\r  \n            \"68\": \"005300\",\r  \n            \"107\": \"007b18\",\r  \n            \"150\": \"009529\",\r  \n            \"190\": \"00aa2c\",\r  \n            \"216\": \"17dd62\",\r  \n            \"255\": \"41f384\"\r  \n        }\r  \n    },\r  \n    \"mask\": {\r  \n        \"type\": \"texture\",\r  \n        \"atlas\": \"block\",\r  \n        \"texture\": \"minecraft:block/water_still\"\r  \n    }\r  \n}\r  \n```\r  \n\r  \n\r  \n\r  \n# NBT Materials\r  \nNBT Materials are Materials that are only defined by a single NBT tag.  \r  \nYou need to put it under the nbt-tag \"miapi_material\".   \r  \nA Valid Parent needs to be defined to extract the stats from.\r  \nAnother optional property \"cost\" exists to set the value of the Item in the Modular Workbench\r  \nAll the other Json material properties can be used.\r  \n\r  \nExample command:\r  \n`/give @p dirt{miapi_material:{parent:gold,flexibility:20,cost:4}} 64`",
          "data": {},
          "key_words": [
            "material",
            "materials"
          ]
        },
        "synergies": {
          "header": "Synergies",
          "description": "- a separate JSON found in miapi/synergies\r  \n- used to augment modules under certain conditions\r  \n- Examples of synergies can be found [here](https://github.com/Truly-Modular/Arsenal/tree/master/arsenal-common/src/main/resources/data/miapi/synergies).\r  \n\r  \nSynergies are a system to allow the dynamic addition/changes of properties under certain conditions.\r  \nThey are seperate json located in miapi:synergies/unique-path-and-name  \r  \nThey apply on a module level of their conditions are meet.\r  \n\r  \n# Types\r  \n### **None**\r  \nif you leave out the \"type\" entry you need to use a module key as a key for the inner data.  \r  \nExample:\r  \n``` json  \r  \n{\r  \n    \"blade_katana\": {\r  \n        \"condition\": {\r  \n            \"type\": \"otherModule\",\r  \n            \"condition\": {\r  \n                \"type\": \"module\",\r  \n                \"module\": \"handle_polearm\"\r  \n            }\r  \n        },\r  \n        \"replace\": {\r  \n            \"displayName\": \"miapi.module.blade_naginata.name\",\r  \n            \"itemId\": \"miapi:modular_naginata\"\r  \n        }\r  \n    }\r  \n}\r  \n```\r  \n### `tag`\r  \nThis applies to modules based on a module tag. This is not a Item Tag. for more information you can visit [here](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List#module-tag-property)\r  \n``` json  \r  \n{\r  \n    \"type\": \"tag\",\r  \n    \"one_handed_sword\": {\r  \n        \"condition\": {\r  \n            \"type\": \"otherModule\",\r  \n            \"condition\": {\r  \n                \"type\": \"tag\",\r  \n                \"tag\": \"one_handed_handle\"\r  \n            }\r  \n        },\r  \n        \"replace\": {\r  \n            \"better_combat_config\": {\r  \n                \"parent\": \"bettercombat:sword\"\r  \n            }\r  \n        }\r  \n    }\r  \n}\r  \n```\r  \n### `all`\r  \nThis will apply to ALL modules.\r  \n``` json  \r  \n{\r  \n    \"type\": \"all\",\r  \n    \"all\": {\r  \n        \"condition\": {\r  \n            \"type\": \"true\"\r  \n        },\r  \n        \"merge\": {\r  \n            \"can_child_be_empty\": false\r  \n        }\r  \n    }\r  \n}\r  \n```\r  \n### `material`\r  \nThis allows you to apply additional porperties under certain conditions. Visit Materialbased Properties first and only if [Material Properties](https://github.com/Truly-Modular/Modular-Item-API/wiki/Materials#properties) dont fit your usecase use this.\r  \n``` json  \r  \n{\r  \n    \"type\": \"material\",\r  \n    \"diamond\": {\r  \n        \"condition\": {\r  \n            \"type\": \"true\"\r  \n        },\r  \n        \"replace\": {\r  \n            \"durability\": \"[material.durability]* 0.5\"\r  \n        }\r  \n    }\r  \n}\r  \n```\r  \n# Inner data\r  \nThe inner data is always behind a key, the inner json.\r  \n### `condition`\r  \nThis is Required!  \r  \nThis is a [Condition Object](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#conditions) under the key \"condition\"\r  \n### `replace`\r  \nThis is a property map that will remove the existing property data of the module in question and fully replace it with this. Use this with caution\r  \n### `merge`\r  \nThis merges the new data with potentially existing data. This should be the default option to use.\r  \n### `remove`\r  \nThis is a list of property keys to remove. All data assisioted with the listed Properties will be removed from the module.",
          "data": {},
          "key_words": [
            "synergy",
            "synergies"
          ]
        }
      }
    },
    "tutorial": {
      "header": "1.20.1 Wiki",
      "description": "Welcome to the Modular-Item-API wiki! This wiki aims to provide documentation and best practices for handling datapacks and resources using the Modular Item API.  \r  \n\r  \n\r  \n# Getting Started\r  \n\r  \n## Datapack\r  \nAll of the data for truly modular has to be stored in data/miapi\r  \nfor more info about the types you can visit [this page](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types)\r  \n\r  \n## Java\r  \nlatest version can be checked via the [releases](https://github.com/Truly-Modular/Modular-Item-API/releases)\r  \nWe recommend the usage of any Architectury Template, depending on Architectury is also recommended since Truly Modular already depends on it the miapi_version needed is the same as the github release tag.\r  \nWe also recommend the usage of yarn as we use yarn as well, but mojmaps should be fine as well\r  \n\r  \n### Common\r  \n```js\r  \nrepositories {\r  \n    maven {\r  \n        url 'http://trulymodular.duckdns.org/maven'\r  \n        allowInsecureProtocol = true\r  \n    }\r  \n    maven { url 'https://maven.uuid.gg/releases' }\r  \n    maven { url 'https://maven.terraformersmc.com/' }\r  \n    maven { url 'https://maven.theillusivec4.top/' }\r  \n    maven {\r  \n        url \"https://maven.jamieswhiteshirt.com/libs-release\"\r  \n        content {\r  \n            includeGroup \"com.jamieswhiteshirt\"\r  \n        }\r  \n    }\r  \n}\r  \n```\r  \n```js\r  \ndependencies {\r  \n    modApi(\"com.Truly-Modular.Modular-Item-API:Truly-Modular-miapi-common:${rootProject.miapi_version}\")\r  \n}\r  \n```\r  \n### Fabric\r  \n```js\r  \ndependencies {\r  \n    modApi(\"com.Truly-Modular.Modular-Item-API:Truly-Modular-miapi-fabric:${rootProject.miapi_version}\")\r  \n}\r  \n```\r  \n### Forge\r  \n```js\r  \ndependencies {\r  \n    modApi(\"com.Truly-Modular.Modular-Item-API:Truly-Modular-miapi-forge:${rootProject.miapi_version}\")\r  \n}\r  \n```",
      "data": {},
      "key_words": [
        "1.20.1 Wiki"
      ]
    }
  }
}