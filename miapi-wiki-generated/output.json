{
  "sub_pages": {
    "data_types": {
      "header": "Json Data Types",
      "description": "Json Data Types are re-accuring data types in different jsons and sub structures.",
      "data": {},
      "key_words": [
        "json data types"
      ],
      "sub_pages": {
        "abilities": {
          "sub_pages": {
            "copy_item": {
              "header": "Copy Item Ability",
              "description": " This ability aims to be able to copy any other items right click ability.  \nThis might not work with some items/mods, as if they check for the executing item this will fail\r",
              "java": "common/src/main/java/smartin/miapi/modules/abilities/CopyItemAbility.java",
              "data": {
                "id": "the id of the item to copy from"
              },
              "key_words": []
            }
          }
        },
        "complex": {
          "header": "Complex Number",
          "description": "- complex numbers allow for resolving of complex math equations like sin or log\r  \n- allows for referencing of material related stats via `[material.JSONKEY]`\r  \n- allows for stuff like `5 + sin([material.hardness] + sqrt(9)`\r  \n\r  \n## Resolvers:\r  \n### `collect`\r  \n- allows for subvarients of `add`,`max`,`min`,`average`\r  \n- the variant can all be followed by any other resolver\r  \n- Example [collect.max.material.durability]\r  \n\r  \n### `material`\r  \n- \"[material.someStat]\"\r  \n- reference a defined stat in a material, if a stat is not defined defaults to 0\r  \n- you can see Materials for more info\r  \n\r  \n### `module`\r  \n- \"[module.someStat]\"\r  \n- reference a defined stat in a module, if a stat is not defined defaults to 0\r  \n- module stats are defined via Properties\r  \n\r  \n###  `module-material` / `material-module`\r  \n- `[module-material.durability]` `[material-module.durability]`\r  \n- this will try to first use the first option, and if no specific stat was set will fallback to the second\r  \n\r  \n### `count`\r  \n- `[count.module]` -> total number of modules on the item\r  \n- `[count.submodules]` -> total number of submodules on the item\r  \n- `[count.unique_materials]` -> total number of different materials used on the item\r  \n- `[count.root_material_matches]` -> total number of material used on the whole item matching the current first module with a material\r  \n- `[count.material_matches]` -> total number of material used on the whole item matching the current modules material",
          "data": {},
          "key_words": [
            "complex number",
            "resolvable number",
            "stat resolver"
          ]
        },
        "condition": {
          "header": "Conditions",
          "description": "Conditions allow in a simple way to create complex conditions for certain things to apply\r  \n\r  \nA common use is that ANY json loaded by truly modular supports loading conditions\r  \nthe key \"load_condition\"://actual condition object\r  \ncan be used in any json, this can make files [conditional on other mods](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#mod_loaded)\r  \n\r  \n## Default Structure\r  \n\r  \n```json\r  \n{\r  \n    \"type\": \"condition_type\"\r  \n}\r  \n```\r  \n\r  \n## **Types**\r  \n\r  \n### true\r  \nThis condition is always True no matter what\r  \n\r  \n### not\r  \nThis condition negates a subcondition  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"not\",\r  \n\t\"condition\": {\r  \n\t\t\"type\": \"true\"\r  \n\t}\r  \n}\r  \n```  \r  \n### and\r  \nThis condition has the sub element \"conditions\" witch are a list of any number of conditions. if ALL are true this is conisdered true  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"and\",\r  \n\t\"conditions\": [\r  \n\t\t{\r  \n\t\t\t\"type\": \"not\",\r  \n\t\t\t\"condition\": {\r  \n\t\t\t\t\"type\": \"true\"\r  \n\t\t\t}\r  \n\t\t},\r  \n\t\t{\r  \n\t\t\t\"type\": \"true\"\r  \n\t\t}\r  \n\t]\r  \n}\r  \n```\r  \n### or\r  \nThis condition has the sub element \"conditions\" witch are a list of any number of conditions. if at least one is true this is conisdered true  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"or\",\r  \n\t\"conditions\": [\r  \n\t\t{\r  \n\t\t\t\"type\": \"not\",\r  \n\t\t\t\"condition\": {\r  \n\t\t\t\t\"type\": \"true\"\r  \n\t\t\t}\r  \n\t\t},\r  \n\t\t{\r  \n\t\t\t\"type\": \"true\"\r  \n\t\t}\r  \n\t]\r  \n}\r  \n```\r  \n## Module Specific Conditions\r  \nThese conditions only are able to return true if used in relation to modules\r  \n### parent\r  \nParent Conditions shift the Condition Context to the parent module if applicable, if no parent module is there this is considered false  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"parent\",\r  \n\t\"condition\": {\r  \n\t\t\"type\": \"not\",\r  \n\t\t\"condition\": {\r  \n\t\t\t\"type\": \"true\"\r  \n\t\t}\r  \n\t}\r  \n}\r  \n```\r  \n### child\r  \nChild Conditions shift the Condition Context to the child module if applicable, if no child module is there this is considered false  \r  \nIt is tested on all children and as long as one does return true this is considered true  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"child\",\r  \n\t\"condition\": {\r  \n\t\t\"type\": \"not\",\r  \n\t\t\"condition\": {\r  \n\t\t\t\"type\": \"true\"\r  \n\t\t}\r  \n\t}\r  \n}\r  \n\r  \n```\r  \n### otherModule\r  \nThis Condition shifts the context to all modules on the Item, if the subCondition is true for at least one module this is considered true  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"otherModule\",\r  \n\t\"condition\": {\r  \n\t\t\"type\": \"not\",\r  \n\t\t\"condition\": {\r  \n\t\t\t\"type\": \"true\"\r  \n\t\t}\r  \n\t}\r  \n}\r  \n\r  \n```\r  \n\r  \n### module\r  \nThis Condition tests if the current module has a certain ID, it is best used with some of the conditions above  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"module\",  \r  \n\t\"module\": \"blade_sword\"  \r  \n}\r  \n\r  \n```  \r  \n### material\r  \nThis Condition tests if the current module has a certain material, it is best used with some of the conditions above  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"material\",\r  \n\t\"material\": \"iron\"\r  \n}\r  \n\r  \n```   \r  \n### material  count\r  \nThis Condition tests if the current iteme has a certain amount of modules with a certain material\r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"material_count\",\r  \n\t\"material\": \"iron\",\r  \n        \"count\":5\r  \n}\r  \n\r  \n```  \r  \n### tag\r  \nThis Condition tests if the current module has a certain tag, module-tags are used to simply identify groups of related modules like blades or handles  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"tag\",\r  \n\t\"tag\": \"blade\"\r  \n}\r  \n\r  \n```    \r  \n\r  \n## Other Types\r  \n### advancement\r  \nThis Condition tests if the current assosiated Player has a certain advancement  \r  \nto find the correct Ids the /advancement command is very usefull  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"advancement\",\r  \n\t\"advancement\": \"minecraft:story/enter_the_nether\"\r  \n}\r  \n\r  \n\r  \n```\r  \n\r  \n### Item in Inventory\r  \nThis Condition tests if the current assosiated Player has a amount of items of that type in their inventory\r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"item_in_inventory\",\r  \n\t\"item\": \"minecraft:dirt\",\r  \n        \"count\": 5\r  \n}\r  \n\r  \n\r  \n```\r  \n### mod_loaded\r  \nThis Condition tests another mod is loaded. this is usually used as a loadCondition for optional jsons  \r  \nas mod the mod ID of the other mod is used  \r  \nExample:\r  \n```json\r  \n{\r  \n\t\"type\": \"mod_loaded\",\r  \n\t\"mod\": \"bettercombat\"\r  \n}\r  \n\r  \n```",
          "data": {},
          "key_words": [
            "condition",
            "conditions"
          ]
        },
        "properties": {
          "header": "Properties",
          "description": "- Properties are responsible for providing modules with effects, statistics, and other attributes.\r  \n- The API includes an extensive selection of properties.\r  \n- Full list of included properties can be found [here](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List).\r  \n- Addons can register their properties if so desired. It is adviced for addons to use ModID_property name to avoid collisions  \r  \n  They need to register like seen in the [RegistryInventory](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/java/smartin/miapi/registries/RegistryInventory.java)\r  \n- Each property has its own way of handling JSON components, witch can be viewed in their Java class",
          "data": {},
          "key_words": [
            "property",
            "properties"
          ]
        }
      }
    },
    "attributes": {
      "header": "Attributes",
      "description": "# Attributes\r  \nMiapi Implements a couple of custom attributes.\r  \nSome of them will only work on Modular Items, so using them outside of Modular Items is not recommended.\r  \n\r  \n# Melee/basic Attributes\r  \n\r  \n### Range/Reach attributes\r  \n- `miapi:generic.reach` and `miapi:generic.attack_range` exist as cross loader range and reach attributes. these attributes dont actually exist, but will be either resolved to `forge:block_reach` or `reach-entity-attributes:reach` for fabric\r  \n\r  \n### Mining Speed Attributes\r  \n- `miapi:generic.mining_speed.pickaxe`, `miapi:generic.mining_speed.axe`, `miapi:generic.mining_speed.shovel`, `miapi:generic.mining_speed.hoe` exist to easier adjust the miningspeed of modular items. This might be reworked later into Double Properties\r  \n- Only works on Modular Items\r  \n\r  \n### Backstab attribute\r  \n- `miapi:generic.back_stab` This attributes increases Damage on Backstab of Melee Attacks. +2 Will increase the damage by 2, +100% will double the Damage dealt\r  \n\r  \n### Armor Crushing attribute\r  \n- `miapi:generic.armor_crushing` This attributes increases Durability Damage done to armor. It is currently unused\r  \n\r  \n### Shield Break attribute\r  \n- `miapi:generic.shield_break` This Attributes value is the amount of seconds a Shield gets disabled when hit.\r  \n\r  \n### Item Use Speed attribute\r  \n- `miapi:generic.player_item_use_speed` This Attributes controls how fast the Player is moving while using an Item(right clicking)\r  \n- this will be reworked soon! dont use this at the moment\r  \n\r  \n### Magic Damage attribute\r  \n- `miapi:generic.magic_damage` This Attributes deals additional magic Damage on hit.\r  \n\r  \n### Critical Damage attribute\r  \n- `miapi:generic.crit_damage` This Attributes incrases Critical Hit Damage. +2 will increase the Damage by 2, +100% will move the the Damage on Criticals from 150% to 250%.\r  \n\r  \n### Critical Chance attribute\r  \n- `miapi:generic.crit_chance` This attribute sets the chance for a Random Critical hit.\r  \n\r  \n\r  \n# Projectile Attributes\r  \n### Bow Draw Time attribute\r  \n- `miapi:generic.bow_draw_time` controls the Bow Draw time, is in Ticks\r  \n- works on Bows/Crossbows\r  \n- Only works on Modular Items\r  \n### Projectile Damage attribute\r  \n- `miapi:generic.projectile_damage` controls the base Damage of Projectiles, most projectiles also use their current speed in total Damage calculation\r  \n- Works on Projectiles\r  \n- Only works on Modular Items\r  \n### Projectile Speed attribute\r  \n- `miapi:generic.projectile_speed` controls the Projectiles Speed.\r  \n- Works on Bows/Crossbows and Projectiles\r  \n- Only works on Modular Items\r  \n### Projectile Accuracy attribute\r  \n- `miapi:generic.projectile_accuracy` controls the Accuracy of the Projectile\r  \n- Works on Bows/Crossbows and Projectiles\r  \n- Only works on Modular Items\r  \n### Projectile Piercing attribute\r  \n- `miapi:generic.projectile_piercing` allos Projectiles to pierce one entity like the Piercing Enchantmant\r  \n- Works on Projectiles\r  \n- Only works on Modular Items\r  \n### Critical Multiplier attribute\r  \n- `miapi:generic.projectile_crit_multiplier` by default arrows do 1.5x damage when Critical. Arrows are critical if the Bow was fully drawn or shot by Crossbow.\r  \n- Works on Projectiles\r  \n- Only works on Modular Items\r  \n\r  \n# Armor Attribtues\r  \n\r  \n### Ressistance attribute\r  \n- `miapi:generic.resistance` the value of this attribute is % of blank damage removed. so a value of 80 will result in a 80% damage reduction.\r  \n  This attributes main use is as a internal way to implement the blockings damage reduction.\r  \n\r  \n### Swim Speed\r  \n- `miapi:generic.swim_speed` On forge this resolved to `forge:generic.swim_speed`\r  \n\r  \n### Projectile Armor attribute\r  \n- `miapi:generic.projectile_armor` Works like Normal Armor, but only works against Projectiles. This is used by Crafted Chainmail Armor\r  \n\r  \n### Shielding Armor attribute\r  \n- `miapi:generic.projectile_armor` Works similar to Absorption, but only works against physical Attacks and regenerates while out of Combat\r  \n\r  \n## Elytra Attributes\r  \n\r  \n### Elytra Turn Effiency attribute\r  \n- `miapi:generic.elytra_turn_efficiency` Controls how much speed an elytra looses while turning. Higher loses less speed\r  \n\r  \n### Elytra Glide Effiency attribute\r  \n- `miapi:generic.elytra_glide_efficiency` Controls how much speed an elytra looses while not turning. Higher loses less speed",
      "data": {},
      "key_words": [
        "attribute",
        "attributes"
      ]
    },
    "datapack_data_types": {
      "header": "Data Types",
      "description": "Data Types concerns the different types of json miapi can load and the following articles explain their use and structure.\r  \nAll jsons for miapi can have the field\r  \n`load_condition` to prevent their loading. this condition is evaluated on reload on the server.\r  \nsee Conditions for more details",
      "data": {},
      "key_words": [
        "datapack data_types",
        "datapack"
      ],
      "sub_pages": {
        "converter": {
          "header": "Modular Converters",
          "description": "- a seperate JSON found in miapi/modular_converter\r  \n- used to convert other items into modular Items\r  \n- Examples of Modular Converters can be found [here](https://github.com/Truly-Modular/Arsenal/tree/master/arsenal-common/src/main/resources/data/miapi/modular_converter).",
          "data": {},
          "key_words": [
            "modular converter",
            "converter"
          ]
        },
        "create": {
          "header": "Create Options",
          "description": "- a seperate JSON found in miapi/create_options\r  \n- Gives create options on the Plus button in the GUI\r  \n- Examples of Create Options can be found [here](https://github.com/Truly-Modular/Arsenal/tree/master/arsenal-common/src/main/resources/data/miapi/create_options).",
          "data": {},
          "key_words": [
            "create options",
            "create option"
          ]
        },
        "modules": {
          "header": "Materials",
          "description": "- a seperate JSON found in miapi/materials\r  \n- The API offers a diverse range of materials.\r  \n- Materials are loosely defined JSON files that serve as references for module statistics.\r  \n- Materials need to be added to data/miapi/materials/anyPathOrNameFromHere.json\r  \n- Full list of materials can be found [here](https://github.com/Truly-Modular/Modular-Item-API/tree/main/common/src/main/resources/data/miapi/materials).\r  \n- In addition Materials are generated at Runtime to increase Mod-Compatibility\r  \n\r  \n\r  \nJsonMaterials is a file format used to define materials within the mod.\r  \nThese materials can have various stats such as hardness, density, flexibility, etc.,\r  \n# Required Fields\r  \n### `key`\r  \nthe unqiue id name of a Material. If you are adding materials from another mod, use modid:materialID here.\r  \n### `translation`\r  \nThe language key of the material, points to the language file.\r  \n### `icon`\r  \nthe Icon of the Material, can either be the path to a texture or a more complex icon, for that see [this](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/resources/data/miapi/materials/glass/black_glass.json#L4) as an example\r  \n### `color`\r  \nThe Hex color of the Material. Please use RGB and NOT RGBA here.\r  \n# Optional Fields\r  \n## Module Stats\r  \nModule stats is a weird subcategory.\r  \nAny open key can be used to define a Modulestat, such as ` hardness` or ` mining level` , for [Example](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/resources/data/miapi/materials/glass/black_glass.json#L4) these can be dynamicly called from by calling [material.hardness] in a complex double as reference.\r  \n\r  \n### `groups`\r  \na list of group keys. by default `stone` `wood` `metal` `bone` `glass` `fabric` `crystal` `gemstone` `flint` `rod` `fletching` `smithing` are used\r  \n### `items`\r  \nA List of Items to create the Material, can either be \"item\", \"tag\" or \"ingredient\". requires also a \"value\" to define the value in relation to the cost of the modules.\r  \n### `properties`\r  \nThis is a complex field . It has subfield sorted by key. Those keys can be referenced by Modules to search for Material Properties. Default keys include `default`  \r  \n`handheld` `tool` `blade`  `head`  `axe` `pickaxe` `hammer` `hoe` `shovel`\r  \n`armor` `helmet` `chest` `pants` `boots`\r  \n\r  \nAfter the respective key a property map can be added to apply additional properties if this material is used on a matching Module.\r  \n\r  \n# Color Palette\r  \nColor Palettes should be defined for all actual materials, and they need to be under the key `color_palette`\r  \nThey can have different Types:\r  \n### `grayscale_map`\r  \nThis is a Map where brigthness values of the raw texture are mapped to direct color values. [Example](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/resources/data/miapi/materials/glass/black_glass.json#L17)\r  \n### `from_material_palette_image`\r  \nThis is a Map where brigthness values of the raw texture are mapped to direct color values. Unlike the grayscale_map this uses a 1x256 texture to remap instead [Example](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/resources/data/miapi/materials/stone/magma.json#L17)\r  \n### `image_generated`\r  \nThis requires the json to mention a texture and this texture will be used to generate a palette similar to how generated Materials work.\r  \n```json\r  \n\"color_palette\": {\r  \n    \"type\": \"image_generated\",\r  \n    \"atlas\": \"block\",\r  \n    \"texture\": \"minecraft:block/dirt\"\r  \n}\r  \n```\r  \n### `image_generated_item`\r  \nThis requires the json to mention a valid ItemId. This might be easier to use than the option above\r  \n```json\r  \n\"color_palette\": {\r  \n    \"type\": \"image_generated_item\",\r  \n    \"item\": \"minecraft:dirt\"\r  \n}\r  \n```\r  \n### `overlay_texture`\r  \nThis overlays a Texture over the existing Model, allowing for cooler looking custom motives. Well repeating texures are recommended. [Example](https://github.com/Truly-Modular/Modular-Item-API/blob/main/common/src/main/resources/data/miapi/materials/stone/sculk.json#L17)\r  \n\r  \n### `layered_mask`\r  \nThis mask between two other Color Palettes via a Texture. Example:\r  \n```json\r  \n\"color_palette\": {\r  \n    \"type\": \"layered_mask\",\r  \n    \"base\": {\r  \n        \"type\": \"grayscale_map\",\r  \n        \"colors\": {\r  \n            \"24\": \"2D0500\",\r  \n            \"68\": \"4A0800\",\r  \n            \"107\": \"720C00\",\r  \n            \"150\": \"720C00\",\r  \n            \"190\": \"BB2008\",\r  \n            \"255\": \"E32008\"\r  \n        }\r  \n    },\r  \n    \"layer\": {\r  \n        \"type\": \"grayscale_map\",\r  \n        \"colors\": {\r  \n            \"24\": \"002d00\",\r  \n            \"68\": \"005300\",\r  \n            \"107\": \"007b18\",\r  \n            \"150\": \"009529\",\r  \n            \"190\": \"00aa2c\",\r  \n            \"216\": \"17dd62\",\r  \n            \"255\": \"41f384\"\r  \n        }\r  \n    },\r  \n    \"mask\": {\r  \n        \"type\": \"texture\",\r  \n        \"atlas\": \"block\",\r  \n        \"texture\": \"minecraft:block/water_still\"\r  \n    }\r  \n}\r  \n```\r  \n\r  \n\r  \n\r  \n# NBT Materials\r  \nNBT Materials are Materials that are only defined by a single NBT tag.  \r  \nYou need to put it under the nbt-tag \"miapi_material\".   \r  \nA Valid Parent needs to be defined to extract the stats from.\r  \nAnother optional property \"cost\" exists to set the value of the Item in the Modular Workbench\r  \nAll the other Json material properties can be used.\r  \n\r  \nExample command:\r  \n`/give @p dirt{miapi_material:{parent:gold,flexibility:20,cost:4}} 64`",
          "data": {},
          "key_words": [
            "material",
            "materials"
          ]
        },
        "synergies": {
          "header": "Synergies",
          "description": "- a separate JSON found in miapi/synergies\r  \n- used to augment modules under certain conditions\r  \n- Examples of synergies can be found [here](https://github.com/Truly-Modular/Arsenal/tree/master/arsenal-common/src/main/resources/data/miapi/synergies).\r  \n\r  \nSynergies are a system to allow the dynamic addition/changes of properties under certain conditions.\r  \nThey are seperate json located in miapi:synergies/unique-path-and-name  \r  \nThey apply on a module level of their conditions are meet.\r  \n\r  \n# Types\r  \n### **None**\r  \nif you leave out the \"type\" entry you need to use a module key as a key for the inner data.  \r  \nExample:\r  \n``` json  \r  \n{\r  \n    \"blade_katana\": {\r  \n        \"condition\": {\r  \n            \"type\": \"otherModule\",\r  \n            \"condition\": {\r  \n                \"type\": \"module\",\r  \n                \"module\": \"handle_polearm\"\r  \n            }\r  \n        },\r  \n        \"replace\": {\r  \n            \"displayName\": \"miapi.module.blade_naginata.name\",\r  \n            \"itemId\": \"miapi:modular_naginata\"\r  \n        }\r  \n    }\r  \n}\r  \n```\r  \n### `tag`\r  \nThis applies to modules based on a module tag. This is not a Item Tag. for more information you can visit [here](https://github.com/Truly-Modular/Modular-Item-API/wiki/Property-List#module-tag-property)\r  \n``` json  \r  \n{\r  \n    \"type\": \"tag\",\r  \n    \"one_handed_sword\": {\r  \n        \"condition\": {\r  \n            \"type\": \"otherModule\",\r  \n            \"condition\": {\r  \n                \"type\": \"tag\",\r  \n                \"tag\": \"one_handed_handle\"\r  \n            }\r  \n        },\r  \n        \"replace\": {\r  \n            \"better_combat_config\": {\r  \n                \"parent\": \"bettercombat:sword\"\r  \n            }\r  \n        }\r  \n    }\r  \n}\r  \n```\r  \n### `all`\r  \nThis will apply to ALL modules.\r  \n``` json  \r  \n{\r  \n    \"type\": \"all\",\r  \n    \"all\": {\r  \n        \"condition\": {\r  \n            \"type\": \"true\"\r  \n        },\r  \n        \"merge\": {\r  \n            \"can_child_be_empty\": false\r  \n        }\r  \n    }\r  \n}\r  \n```\r  \n### `material`\r  \nThis allows you to apply additional porperties under certain conditions. Visit Materialbased Properties first and only if [Material Properties](https://github.com/Truly-Modular/Modular-Item-API/wiki/Materials#properties) dont fit your usecase use this.\r  \n``` json  \r  \n{\r  \n    \"type\": \"material\",\r  \n    \"diamond\": {\r  \n        \"condition\": {\r  \n            \"type\": \"true\"\r  \n        },\r  \n        \"replace\": {\r  \n            \"durability\": \"[material.durability]* 0.5\"\r  \n        }\r  \n    }\r  \n}\r  \n```\r  \n# Inner data\r  \nThe inner data is always behind a key, the inner json.\r  \n### `condition`\r  \nThis is Required!  \r  \nThis is a [Condition Object](https://github.com/Truly-Modular/Modular-Item-API/wiki/Json-Data-Types#conditions) under the key \"condition\"\r  \n### `replace`\r  \nThis is a property map that will remove the existing property data of the module in question and fully replace it with this. Use this with caution\r  \n### `merge`\r  \nThis merges the new data with potentially existing data. This should be the default option to use.\r  \n### `remove`\r  \nThis is a list of property keys to remove. All data assisioted with the listed Properties will be removed from the module.",
          "data": {},
          "key_words": [
            "synergy",
            "synergies"
          ]
        }
      }
    }
  }
}