{
  "header": "Wiki for 1.21",
  "description": "  \nWelcome to the Wiki for Truly Modular 1.21  \nThis Wiki is structured to help Modpack developers/people who want to add/modify content in Truly Modular via Datapacks  \nIt goes in-depth about various Unique things to truly modular, but also over some common Datapack things,  \nIt is aimed at all people  \n",
  "java": "",
  "data": {},
  "key_words": [],
  "sub_pages": {
    "data_types": {
      "header": "Data Types",
      "description": "  \nData Types are commonly used Types of json encoded data.  \nDifferent systems all use these same types, so this is an explanation for the individual types  \n",
      "java": "common/src/main/java/smartin/miapi/modules/ModuleDataPropertiesManager.java",
      "data": {},
      "key_words": [
        "DataTypes",
        "datatypes",
        "data_types"
      ],
      "sub_pages": {
        "condition": {
          "header": "Conditions",
          "description": "  \nConditions! what is there to describe  \n",
          "java": "common/src/main/java/smartin/miapi/modules/conditions/ConditionManager.java",
          "data": {},
          "key_words": [
            "Condition"
          ],
          "sub_pages": {
            "advancement_condition": {
              "header": "Advancement Condition",
              "description": "  \nthis condition checks if the associated player has a specific advancement. This is set to false if there is no associated Player  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/AdvancementCondition.java",
              "data": {
                "type": "advancement",
                "advancement": " the id of the advancement, you can use the /advancement command to get a list of these"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "and_condition": {
              "header": "And Condition",
              "description": "  \nthis condition requires all sub conditions to be true  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/AndCondition.java",
              "data": {
                "type": "and",
                "conditions": "sub Conditions to be checked"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "child_condition": {
              "header": "Child Condition",
              "description": "  \nthis condition moves the context to any direct child module  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/ChildCondition.java",
              "data": {
                "type": "child",
                "condition": "sub Condition to be tested on the child modules"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "is_mod_loaded": {
              "header": "Mod Loaded Condition",
              "description": "  \nthis condition checks if a mod is loaded, you should consider using this as a Load Condition  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/IsModLoadedCondition.java",
              "data": {
                "type": "mod_loaded",
                "mod": "the mod ID to be checked"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "item_in_inventory": {
              "header": "Item in inventory Condition",
              "description": "  \nthis condition checks if a certain amount of a certain item is in a players inventory  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/ItemInInventoryCondition.java",
              "data": {
                "type": "item_in_inventory",
                "item": "Item in the form of an Ingredient",
                "count": "the amount of items needed to be present"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "material": {
              "header": "Material Condition",
              "description": "  \nthis condition checks if this Module has a certain material  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/MaterialCondition.java",
              "data": {
                "type": "material",
                "material": "the material to be checked"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "material_count": {
              "header": "Material Count Condition",
              "description": "  \nthis condition checks if the item has a certain material a certain amount of times  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/MaterialCountCondition.java",
              "data": {
                "type": "material_count",
                "material": "the material to be checked",
                "count": "how often the material is used"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "miapi_perm": {
              "header": "Miapi Perm Condition",
              "description": "  \nthis condition is to check patreon or other types of outside conditions like time of year.  \nThis is mostly used to give patreon subscribers their skins/enable free skins depending on the season  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/MiapiPerm.java",
              "data": {
                "type": "miapi_perm",
                "perm": "a list of perms or UUIDS"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "module": {
              "header": "Module Type Condition",
              "description": "  \nthis condition if the associated module instance uses this module  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/ModuleTypeCondition.java",
              "data": {
                "type": "module",
                "module": "the id of the module"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "not": {
              "header": "Not Condition",
              "description": "  \nthis condition inverses another condition  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/NotCondition.java",
              "data": {
                "type": "not",
                "condition": "the sub condition to be inversed"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "number": {
              "header": "Number Condition",
              "description": "  \nthis condition inverses another condition  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/NumberCondition.java",
              "data": {
                "type": "number",
                "condition": "a Double Resolvable, if the result is higher than 0 is considered true"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "or_condition": {
              "header": "Or Condition",
              "description": "  \nthis condition requires one sub conditions to be true  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/OrCondition.java",
              "data": {
                "type": "or",
                "conditions": "sub Conditions to be checked"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "other_module": {
              "header": "Other Module Condition",
              "description": "  \nthis condition moves the context to any other module of the item  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/OtherModuleModuleCondition.java",
              "data": {
                "type": "other_module",
                "condition": "sub Condition to be tested on all other modules of the item"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "parent": {
              "header": "Parent Condition",
              "description": " this condition moves the context to the parent module  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/ParentCondition.java",
              "data": {
                "type": "parent",
                "condition": "sub Condition to be tested on the parent module"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "tag": {
              "header": "Tag Condition",
              "description": " this condition checks if the associated module has a specific module tag. Not to be confused with Item Tags  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/TagCondition.java",
              "data": {
                "type": "tag",
                "tag": "the tag to be checked"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "true": {
              "header": "True Condition",
              "description": " this condition is always true  \n",
              "java": "common/src/main/java/smartin/miapi/modules/conditions/TrueCondition.java",
              "data": {
                "type": "true"
              },
              "key_words": [],
              "sub_pages": {}
            }
          }
        },
        "properties": {
          "header": "Properties",
          "description": "  \nProperties are the main way any stat is assigned to anything  \nThey are usually found in an id -> data map like  \n``` json  \n{  \n    \"miapi:fire_proof\":true  \n}  \n```  \nNote that in this example \"miapi\" can be removed as it is implied if no mod id is set  \nMost Properties have more complex inner data than a boolean  \n",
          "java": "common/src/main/java/smartin/miapi/modules/properties/util/ModuleProperty.java",
          "data": {},
          "key_words": [
            "Properties",
            "moduleProperties"
          ],
          "sub_pages": {
            "armor": {
              "header": "Armor Properties",
              "description": "  \nArmor Properties are properties specificly made for armor  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/armor/ArmorFolder.java",
              "data": {},
              "key_words": [],
              "sub_pages": {
                "can_walk_on_snow": {
                  "header": "Snow Walking Property",
                  "description": "  \nThis Property allows the player to walk over powdered snow  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/armor/CanWalkOnSnow.java",
                  "data": {
                    "can_walk_on_snow": "a Boolean Resolvable"
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "equipment_slot": {
                  "header": "Equipment Slot Property",
                  "description": "  \nIt is recommneded to use the correct Item as well as this for better mod compatibility  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/armor/EquipmentSlotProperty.java",
                  "data": {
                    "equipment_slot": "the preferred Equipment Slot Group"
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "food_exhaustion": {
                  "header": "Exhaustion Property",
                  "description": "  \nThis property was made for heavy armor, it increases the food exhaustion of the player  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/armor/ExhaustionProperty.java",
                  "data": {
                    "food_exhaustion": "a Double Resolvable"
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "is_piglin_gold": {
                  "header": "IsPiglinGold Property",
                  "description": "  \nThis Property allows to set armor pieces as Piglin pacifying like gold is  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/armor/IsPiglinGold.java",
                  "data": {
                    "is_piglin_gold": "a Boolean Resolvable"
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "pillager_guard": {
                  "header": "PillagesGuard Property",
                  "description": "  \nThis property allows you to have reduced damage intake from pillagers  /raid related mobs  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/armor/PillagesGuard.java",
                  "data": {
                    "pillager_guard": "a Double Resolvable"
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "step_noise_cancel": {
                  "header": "Step Canceling Property",
                  "description": "  \nThis Property cancels the step sounds, this is meant to interact with wardens and sculk sensors  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/armor/StepCancelingProperty.java",
                  "data": {
                    "step_noise_cancel": "a Boolean Resolvable"
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "water_gravity": {
                  "header": "Water Gravity Property",
                  "description": "  \nThis property increases Gravity while under water, used to make players sink faster  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/armor/WaterGravityProperty.java",
                  "data": {
                    "water_gravity": "a Double Resolvable"
                  },
                  "key_words": [],
                  "sub_pages": {}
                }
              }
            },
            "attributes": {
              "header": "Attribute Properties",
              "description": "  \nProperties related to attributes  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/attributes/AttributeFolder.java",
              "data": {},
              "key_words": [],
              "sub_pages": {
                "item_attributes": {
                  "header": "Attribute Property",
                  "description": "  \nThe Attribute Property is used to modify various attributes for items  \nIt can set basic, multiply and resolve complex attributes. This is a core part of the api  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/attributes/AttributeProperty.java",
                  "data": {
                    "attributes": "a list of item attributes, allowing each for the following fields",
                    "attribute": " the ID of the attribute",
                    "value": " double resolvable",
                    "operation": " the operation to execute, + * ** are allowed",
                    "slot": " the target slot group",
                    "targetOperation ": " optional, the operation to be merged to"
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "attribute_split": {
                  "header": "Attribute Split Property",
                  "description": "  \nThe Attribute Split Property is used to divide attributes across different contexts.  \nIt enables assigning attributes to multiple slots and merging them based on a percentage split.  \nThis property is essential to re-balance certain attributes for usage with other mods like alembic.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/attributes/AttributeSplitProperty.java",
                  "data": {
                    "context": " a map containing the attribute context and split configurations.",
                    "context.attribute": " the ID of the attribute to be split.",
                    "context.slot": " the target equipment slot group for the attribute.",
                    "splitContext": " the list of split configurations for each attribute.",
                    "splitContext.attribute": " the attribute being split.",
                    "splitContext.percent": " the percentage of the original attribute value assigned to this split.",
                    "splitContext.value": " the final resolved value for this split.",
                    "operation": " the operation executed on the split values, e.g., addition."
                  },
                  "key_words": [],
                  "sub_pages": {}
                }
              }
            },
            "crafting_condition": {
              "header": "Crafting Condition Property",
              "description": "  \nThe CraftingConditionProperty defines conditions for crafting modules, including whether they are visible, selectable, and  \ncraftable. Conditions are evaluated using {@link ModuleCondition} instances, which can be customized for different scenarios.  \nThe property also supports event-based evaluations to manage crafting permissions dynamically.  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/CraftingConditionProperty.java",
              "data": {
                "crafting_condition": " An instance of {@link CraftingConditionJson} containing conditions for visibility, selection, and crafting ability.",
                "visible": " (optional) that determines if the module is visible for crafting.",
                "selectAble": " (optional) that determines if the module can be selected for crafting.",
                "craftAble": " (optional) that determines if the module can be crafted."
              },
              "key_words": [],
              "sub_pages": {}
            },
            "display_name": {
              "header": "Display Name Property",
              "description": "  \nThe DisplayNameProperty enables the customization of item display names based on module data. It retrieves the display name  \nby resolving it through module instances and materials. The display name can be dynamically generated using translation keys  \nand material-specific translations.  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/DisplayNameProperty.java",
              "data": {
                "display_name": " A Text element representing the display name of the item."
              },
              "key_words": [],
              "sub_pages": {}
            },
            "durability": {
              "header": "Durability Property",
              "description": "  \nThe DurabilityProperty controls the maximum durability of an item. The durability is specified as a Double Resolvable value,  \nwhich determines the item's maximum damage capacity. This value is applied to the item stack, influencing how much wear and  \ntear the item can withstand before breaking.  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/DurabilityProperty.java",
              "data": {
                "durability": " A Double value representing the maximum durability of the item."
              },
              "key_words": [],
              "sub_pages": {}
            },
            "emissive": {
              "header": "Emissivity Property",
              "description": "  \nThe EmissivityProperty defines the emissive light levels for an item or block. Emissive properties affect how much light  \nan item or block emits.  \nThese values are applied to the item or block to control its visual appearance in lighting conditions.  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/EmissivityProperty.java",
              "data": {
                "sky": " An integer representing the light level emitted in the sky.",
                "block": " An integer representing the light level emitted from the block."
              },
              "key_words": [],
              "sub_pages": {}
            },
            "enchantments": {
              "header": "Enchantment Properties",
              "description": "  \nProperties related to enchantments  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/enchanment/EnchantFolder.java",
              "data": {},
              "key_words": [],
              "sub_pages": {
                "allowed_enchantments": {
                  "header": "Allowed Enchantments Property",
                  "description": "  \nThe Allowed Enchantments Property is used to specify and manage enchantments that can or cannot be applied to certain items.  \nIt handles enchantment restrictions based on item types and also allows extensions to be detected and dynamically added.  \nThis property is crucial for controlling item enchantment compatibility within the modular item system.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/enchanment/AllowedEnchantments.java",
                  "data": {
                    "allowed": " a list of allowed enchantments (ResourceLocation).",
                    "forbidden": " a list of forbidden enchantments (ResourceLocation)."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "crafting_enchants": {
                  "header": "Crafting Enchantments Property",
                  "description": "  \nThe Crafting Enchantments Property adds specific enchantments to an item when it is crafted.  \nThese enchantments are permanently added to the item and remain during subsequent uses or modifications.  \nThe property dynamically calculates the level of the enchantment using a resolvable operation that can reference the previous level of the enchantment.  \nIt integrates with the core enchantment system and ensures compatibility with existing enchantment handling mechanisms.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/enchanment/CraftingEnchantProperty.java",
                  "data": {
                    "enchantment": " The enchantment being applied.",
                    "value": " Double Resolvable, used to calculate the level of the enchantment."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "enchantability": {
                  "header": "Enchantability Property",
                  "description": "  \nThe Enchantability Property defines how effective an item is for enchanting purposes.  \nThis value influences the quality of enchantments available through the enchanting table.  \nBy default, enchantability is derived from the material properties of the item, but this property allows for modification through module instances.  \nIf no specific value is set, a default enchantability of 15 is used.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/enchanment/EnchantAbilityProperty.java",
                  "data": {
                    "enchantability": " double, representing the enchantability value used for enchantment calculations.",
                    "default_value": " 15.0, the default enchantability if no custom value is provided.",
                    "material_controlled": " By default, enchantability is determined by material properties through the `MaterialProperty` module.",
                    "module_instance": " Allows for custom enchantability values through module instances, which are averaged if multiple values are present."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "fake_enchants": {
                  "header": "Fake Enchantment Property",
                  "description": "  \nThe Fake Enchantment Property simulates enchantment levels on items during specific operations.  \nThese enchantments are not shown in the item's tooltip and are purely functional.  \nThe property evaluates enchantment levels dynamically using the `[old_level]` placeholder, which allows referencing prior levels in the calculation.  \nOnce the property is removed, the enchantments no longer affect the item.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/enchanment/FakeEnchantmentProperty.java",
                  "data": {
                    "enchantment": " The fake enchantment being applied (Holder<Enchantment>).",
                    "value": " DoubleOperationResolvable, which defines how the level of the fake enchantment is calculated."
                  },
                  "key_words": [],
                  "sub_pages": {}
                }
              }
            },
            "fake_item_tag": {
              "header": "Fake Item Tag Property",
              "description": "  \nThe FakeItemTagProperty allows you to manage custom item tags for items. This property can be used to assign fake or  \nplaceholder tags to items, which can be useful for various in-game functionalities or for modding purposes. These tags  \nare stored as a list of strings, and the property provides methods to retrieve and check these tags.  \n *  \nFor example, you can use this property to simulate item tags that do not exist in the default Minecraft item tag system.  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/FakeItemTagProperty.java",
              "data": {
                "tags": " A list of strings representing the fake tags assigned to the item."
              },
              "key_words": [],
              "sub_pages": {}
            },
            "fire_proof": {
              "header": "Fire Proof Property",
              "description": "  \nThe FireProof property allows items to be marked as fireproof, making them immune to Lava. When an item is set with this  \nproperty, it will not be damaged or affected by fire or lava.  \nThis property is represented as a boolean value where `true` indicates that the item is fireproof, and `false` means it is not.  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/FireProof.java",
              "data": {
                "fireProof": " A boolean value indicating whether the item is immune to fire and lava."
              },
              "key_words": [],
              "sub_pages": {}
            },
            "gui_stat": {
              "header": "GUI Stat Property",
              "description": "  \nThe GuiStatProperty manages statistics displayed in the GUI for items. It allows the attachment of custom statistics  \nto items, which can be displayed in the GUI with a header, description, and a range of values. Each statistic is defined  \nwith a minimum and maximum value, and the current value is dynamically resolved based on the item instance.  \nThis property is used to enhance the user interface by providing detailed item statistics.  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/GuiStatProperty.java",
              "data": {
                "min": " A Double Operation representing the minimum value of the statistic.",
                "max": " A Double Operation representing the maximum value of the statistic.",
                "value": " A Double Operation representing the current value of the statistic.",
                "header": " A Text Element used as the header for the statistic display.",
                "description": " An optional Text Element providing a description for the statistic."
              },
              "key_words": [],
              "sub_pages": {}
            },
            "handheld_item": {
              "header": "Handheld Item Property",
              "description": "  \nThe HandheldItemProperty provides functionality for items that grant bonuses or perform special actions when held in  \nboth the main hand and off hand. Specifically, this property gives +50% attack speed if both hands contain items with  \nthis property. Additionally, it can automatically swap items between hands when better combat is not present.  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/HandheldItemProperty.java",
              "data": {
                "handheld_item": " a boolean value if this is a handheld item. default is false"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "item_id": {
              "header": "Item ID Property",
              "description": "  \nThe ItemIdProperty allows for the modification of an item's identifier upon crafting. When this property is applied,  \nit changes the `ItemStack`'s item to a different one based on a in java registered Modular Item.  \nThis is useful for dynamically altering items during the crafting process, giving you the ability to switch item types  \naccording to predefined configurations.  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/ItemIdProperty.java",
              "data": {
                "item_id": " the desired Item ID."
              },
              "key_words": [],
              "sub_pages": {}
            },
            "item_lore": {
              "header": "Lore Property",
              "description": "  \nThe LoreProperty manages the lore (or descriptive text) of an item. This property allows items to display custom lore  \nthat can be added either at the top or bottom of the item's tooltip. The lore is defined as a list of {@link Holder} objects,  \neach specifying the text, position, and priority of the lore entry.  \n *  \nThe lore can be customized based on whether the item is modular or not, and additional configurations are available  \nthrough {@link MiapiConfig}. Depending on the environment (client or server), different lore might be injected.  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/LoreProperty.java",
              "data": {
                "a list of Lore Entires, compromoised of": "",
                "text": " The {@link Component} text to display.",
                "position": " The position of the lore (\"top\" or \"bottom\").",
                "priority": " The priority of the lore entry, used for sorting."
              },
              "key_words": [],
              "sub_pages": {}
            },
            "luminous_learning": {
              "header": "Luminous Learning Property",
              "description": "  \nThe LuminousLearningProperty enhances the experience drops from both blocks and entities. When an item with this property  \nis used to break blocks or when a player slays a mob, the amount of XP dropped is increased based on the configured value.  \n *  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/LuminousLearningProperty.java",
              "data": {
                "luminious_learning": " the amount of XP increase."
              },
              "key_words": [],
              "sub_pages": {}
            },
            "mining": {
              "sub_pages": {
                "condition": {
                  "sub_pages": {
                    "always": {
                      "header": "Always Mining Condition",
                      "description": "  \nThis is condition less, you can just always mine whatever  \n",
                      "java": "common/src/main/java/smartin/miapi/modules/properties/mining/condition/AlwaysMiningCondition.java",
                      "data": {},
                      "key_words": [],
                      "sub_pages": {}
                    },
                    "block_tag": {
                      "header": "Block Tag Condition",
                      "description": "  \nThe `BlockTagCondition` implements the `MiningCondition` interface and is used to enforce that mining shapes only apply to blocks that have one of the specified tags.  \nIt is useful for scenarios where you want to restrict the mining operation to blocks that are categorized under specific tags.  \n",
                      "java": "common/src/main/java/smartin/miapi/modules/properties/mining/condition/BlockTagCondition.java",
                      "data": {
                        "block_tag": " A list of block tags that are used to determine which blocks are eligible for mining. The mining operation will only apply to blocks with these tags."
                      },
                      "key_words": [],
                      "sub_pages": {}
                    }
                  }
                },
                "mining_level": {
                  "header": "Mining Level Property",
                  "description": "  \nThe MiningLevelProperty manages the mining capabilities of tools, determining their effectiveness based on various rules and configurations.  \nThese configurations include block-specific mining speeds, block blacklists, and conditions for correct tool usage.  \n *  \nBy default, the mining level is influenced by the material properties associated with the tool.  \nCustom rules can be defined to adjust mining speeds and tool compatibilities dynamically.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/mining/MiningLevelProperty.java",
                  "data": {
                    "mining_capabilities": " A map linking mining rules to specific block tags for determining tool effectiveness.",
                    "codec": " A codec for serializing and deserializing mining rules, allowing for flexible data handling.",
                    "caching": " The property uses a caching mechanism to optimize performance when accessing mining rules.",
                    "mining_rules": "",
                    "`blocks`": " List of blocks that the tool can mine.",
                    "`block_list | blacklist_tag`": " List of blocks that the tool cannot mine.",
                    "`speed`": " A resolvable value that determines the mining speed for the tool.",
                    "`correctForDrops`": " Optional boolean indicating whether the tool is correct for drops.",
                    "`useMaterial`": " Boolean indicating if material properties should affect mining rules."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "mining_shape": {
                  "header": "Mining Shape Property",
                  "description": "  \nThe MiningShapeProperty controls how tools mine multiple blocks based on the configured mining shapes, conditions, and modes.  \nThis allows for varied mining behaviors such as mining entire veins or large areas with a single action.  \n *  \nThe property supports different mining shapes (e.g., cubes, veins), conditions (e.g., block tags, always mine), and modes (e.g., instant, staggered).  \nIt also incorporates mining modifiers that can influence mining behavior, such as requiring all blocks to be the same type.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/mining/MiningShapeProperty.java",
                  "data": {
                    "mining_modes": " instant or staggered exist by default",
                    "mining_conditions": " always and block_tag exist by default",
                    "mining_modifiers": "require_same exists by default"
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "shape": {
                  "sub_pages": {
                    "instant_mining": {
                      "header": "Instant Mining",
                      "description": "  \nThis mode processes all blocks in the list instantly, creating drops at the exact location where each block was mined. It also includes a durability break chance which determines the likelihood of breaking the item during mining.  \n *  \n *  \n",
                      "java": "common/src/main/java/smartin/miapi/modules/properties/mining/mode/InstantMiningMode.java",
                      "data": {
                        "codec": " Defines the codec used to serialize and deserialize `InstantMiningMode` instances.",
                        "id": " The unique identifier for this mining mode, used in configurations and data definitions.",
                        "durabilityBreakChance": " The probability that the item's durability will decrease during mining. This value ranges from 0.0 (no chance) to 1.0 (guaranteed breakage)."
                      },
                      "key_words": [],
                      "sub_pages": {}
                    },
                    "staggered_mining": {
                      "header": "Staggered Mining",
                      "description": "  \nThis mode processes blocks in a staggered manner, giving a more gradual mining experience compared to instant mining. It handles mining tasks in a delayed fashion, which can help manage performance and resource usage during mining operations.  \n",
                      "java": "common/src/main/java/smartin/miapi/modules/properties/mining/mode/StaggeredMiningMode.java",
                      "data": {
                        "speed": " The rate at which blocks are mined. Higher values result in faster mining speeds.",
                        "durabilityBreakChance": " The probability that the item's durability will decrease during mining, ranging from 0.0 (no chance) to 1.0 (guaranteed breakage)."
                      },
                      "key_words": [],
                      "sub_pages": {}
                    },
                    "same_block_modifier": {
                      "header": "Same Block modifier",
                      "description": "  \nThis modifier ensures that only blocks of the same type as the one being initially mined are processed. If the `requireSame` flag is set to true, the modifier will filter the list of blocks to only include those of the same type as the starting block. If set to false, all blocks in the list will be processed.  \n",
                      "java": "common/src/main/java/smartin/miapi/modules/properties/mining/modifier/SameBlockModifier.java",
                      "data": {
                        "requireSame": " A boolean flag indicating whether only blocks of the same type as the initial block should be mined."
                      },
                      "key_words": [],
                      "sub_pages": {}
                    }
                  }
                }
              }
            },
            "module_stats": {
              "header": "Module Stats Property",
              "description": "  \nThe ModuleStats property allows for the specification of various statistics associated with a module, where each statistic  \nis represented by a key-value pair.  \nThis property is integrated with the Stat Resolver and can be queried by using [module.custom_stat_name].  \n *  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/ModuleStats.java",
              "data": {
                "stats": " A {@link Map} where each entry consists of a {@link String} key and a {@link Double} value, representing different"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "on_hit": {
              "header": "OnHit Properties",
              "description": "  \nThese are basic properties that apply (mostly) on melee attacks  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/onHit/OnHitFolder.java",
              "data": {},
              "key_words": [],
              "sub_pages": {
                "armor_pen": {
                  "header": "Armor Penetration Property",
                  "description": "  \nThe Armor Penetration Property is used to reduce the effectiveness of armor on entities when hit by items with this property.  \nIt adjusts the damage calculation by applying a temporary attribute modifier to decrease the armor value of the target. This allows weapons to bypass a portion of the target's armor.  \nThe value specified for armor penetration is treated as a percentage reduction of the armor's effectiveness.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/onHit/ArmorPenProperty.java",
                  "data": {
                    "value": " The percentage of armor penetration applied. A value of 100 means complete armor penetration, while a lower value means less reduction."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "entity": {
                  "header": "OnHit Entity Properties",
                  "description": "  \nThese are basic properties that increase damage against certain entity types. this probably should be reworked to use tags!  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/onHit/entity/OnHitEntityFolder.java",
                  "data": {},
                  "key_words": [],
                  "sub_pages": {
                    "aquatic_damage": {
                      "header": "Aquatic Damage Property",
                      "description": "  \nThe Aquatic Damage Property enhances damage dealt to entities that are classified as sensitive to impaling.  \nThis includes aquatic creatures like fish and other water-dwelling entities.  \n",
                      "java": "common/src/main/java/smartin/miapi/modules/properties/onHit/entity/AquaticDamage.java",
                      "data": {
                        "aquatic_damage": " the amount of damage increase."
                      },
                      "key_words": [],
                      "sub_pages": {}
                    },
                    "illager_bane": {
                      "header": "Illager Bane Property",
                      "description": "  \nThe Illager Bane Property boosts damage dealt to entities classified as Illagers or their allies. This includes Illagers and their associated friends, providing enhanced effectiveness against these specific entity types.  \nThis property is particularly useful in scenarios where players need to deal additional damage to Illager-type mobs, such as during raids or in areas populated with these enemies.  \n",
                      "java": "common/src/main/java/smartin/miapi/modules/properties/onHit/entity/IllagerBane.java",
                      "data": {
                        "illager_bane": " the amount of damage increase."
                      },
                      "key_words": [],
                      "sub_pages": {}
                    },
                    "smite_damage": {
                      "header": "Smite Damage Property",
                      "description": "  \nThe Smite Damage Property enhances damage against undead entities.  \nThis includes all entities that are classified as sensitive to the Smite effect, which typically encompasses various undead mobs.  \n",
                      "java": "common/src/main/java/smartin/miapi/modules/properties/onHit/entity/SmiteDamage.java",
                      "data": {
                        "smite_damage": " the amount of damage increase."
                      },
                      "key_words": [],
                      "sub_pages": {}
                    },
                    "spider_damage": {
                      "header": "Spider Damage Property",
                      "description": "  \nThe Spider Damage Property enhances damage against spiders and other entities that are sensitive to the Bane of Arthropods enchantment.  \n",
                      "java": "common/src/main/java/smartin/miapi/modules/properties/onHit/entity/SpiderDamage.java",
                      "data": {
                        "spider_damage": " the amount of damage increase."
                      },
                      "key_words": [],
                      "sub_pages": {}
                    }
                  }
                },
                "fracturing": {
                  "header": "Fracturing Property",
                  "description": "  \nThe Fracturing Property enhances the attack damage of a weapon as its durability decreases. This means that the lower the durability of the weapon, the higher its attack damage becomes.  \nThis property is useful for creating weapons that become more powerful as they are used, adding a dynamic element to their performance.  \nThe damage increase is calculated as a percentage of the weapon's current durability relative to its maximum durability.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/onHit/FracturingProperty.java",
                  "data": {
                    "value": " The percentage of increased attack damage relative to the weapon's remaining durability. A value of 100 means a 100% increase in attack damage at full wear."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "health_percent": {
                  "header": "Health Percent Damage Property",
                  "description": "  \nThe Health Percent Damage Property adds extra damage to a target based on the percentage of their current health. This means that the lower the target's health, the more damage they will receive from the attack.  \nThis property is useful for creating weapons or effects that scale their damage relative to the health of the target, making them more effective against low-health enemies.  \nThe additional damage is calculated as a percentage of the target's current health, providing a dynamic scaling effect during combat.  \nIt is recommended to use this sparingly, since against modded bosses this might escalate fairly quickly!  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/onHit/HealthPercentDamage.java",
                  "data": {
                    "value": " The percentage of the target's current health that is added as extra damage. For example, a value of 10 means an additional 10% of the target's current health is added to the damage dealt."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "immolate": {
                  "header": "Immolate Property",
                  "description": "  \nThis is currently not implemented  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/onHit/ImmolateProperty.java",
                  "data": {
                    "value": ""
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "leeching": {
                  "header": "Leeching Property",
                  "description": "  \nThe Leeching Property enables a lifesteal effect, where a portion of the damage dealt by an entity is converted into health for that entity.  \nThe amount of healing is proportional to the damage dealt and is affected by the level of the leeching property.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/onHit/LeechingProperty.java",
                  "data": {
                    "value": " The percentage of damage dealt that is converted into health. For example, a value of 10 means that 10% of the damage dealt is used to heal the attacker."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "lightning": {
                  "header": "Lightning On Hit Property",
                  "description": "  \nThe Lightning On Hit Property causes lightning bolts to strike the location of the entity that was hit when the attacker has this property active.  \nThis effect is applied every time the entity with the property deals damage, making it a dramatic and powerful feature for weapons or abilities.  \nThe number of lightning bolts and their intensity are determined by the value of the property.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/onHit/LightningOnHit.java",
                  "data": {
                    "value": " The number of lightning bolts that will strike the location of the entity being hit. For example, a value of 3 means three lightning bolts will appear."
                  },
                  "key_words": [],
                  "sub_pages": {}
                }
              }
            },
            "onHit": {
              "sub_pages": {
                "nemesis": {
                  "header": "Nemesis Property",
                  "description": "  \nThe Nemesis Property allows weapons to deal increased damage to certain types of entities. As the weapon is used to kill more of the specified entity type, it gains additional damage potential against them. If the weapon is used against other types of entities, it loses some of its bonus damage.  \nThis property tracks the number of kills made and adjusts the damage dealt based on the entity type and the number of kills recorded. It also updates the item's tooltip to reflect the current state of its nemesis status.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/onHit/NemesisProperty.java",
                  "data": {
                    "value": "the scaling, how high and fast it gains damage"
                  },
                  "key_words": [],
                  "sub_pages": {}
                }
              }
            },
            "potion": {
              "header": "Potion Related Properties",
              "description": "  \nProperties related to Potion  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/potion/PotionFolder.java",
              "data": {},
              "key_words": [],
              "sub_pages": {
                "on_damaged_effects": {
                  "header": "On Damaged Effects Property",
                  "description": "  \nThis property triggers specific potion effects on an entity when it is damaged. The effects and their  \nproperties (such as duration, amplifier, probability) are defined by `PossibleEffect` instances. The effects  \ncan be configured to apply to either the attacker or the target entity, based on the `targetSelf` parameter.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/potion/OnDamagedEffects.java",
                  "data": {
                    "effects": " A list of `PossibleEffect` instances, each defining a potion effect to be applied under certain conditions."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "on_hit_target_effects": {
                  "header": "On Hit Target Effects Property",
                  "description": "  \nThis property triggers specific potion effects on the target entity when the attacker hits it. The effects  \nare defined by `PossibleEffect` instances, which include parameters like probability, duration, and amplifier.  \nThe effects can be configured to apply based on various conditions, and the tooltip will display relevant  \ninformation about these effects.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/potion/OnHitTargetEffects.java",
                  "data": {
                    "effects": " A list of `PossibleEffect` instances that define the potion effects to be applied when hitting the target entity."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "on_kill_effects": {
                  "header": "On Kill Effects Property",
                  "description": "  \nThis property triggers specific potion effects on the attacker when a living entity they have hit is killed.  \nThe effects are defined by `PossibleEffect` instances, which include parameters such as probability, duration,  \nand amplifier. These effects are applied to the attacker upon the death of the target entity.  \nThe tooltip will display relevant information about these effects when the property is used in-game.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/potion/OnKillEffects.java",
                  "data": {
                    "effects": " A list of `PossibleEffect` instances that define the potion effects to be applied when the attacker successfully kills an entity."
                  },
                  "key_words": [],
                  "sub_pages": {}
                }
              }
            },
            "priority": {
              "header": "UI Priority Property",
              "description": "  \nThe PriorityProperty affects the ordering of items or modules within the GUI. This property assigns a priority value  \nto each item or module, which influences its placement or sorting in graphical user interfaces where multiple items  \nor modules are displayed. A lower value will be placed first in the list and higher values at the end.  \n *  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/PriorityProperty.java",
              "data": {
                "priority": " the priority for sorting"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "projectile": {
              "sub_pages": {
                "air_drag": {
                  "header": "Air Drag Property",
                  "description": "  \nThe air drag affects the speed loss of projectiles as they travel through the air. The drag is represented as a double  \nvalue, 1.0 means no loss, 0.0 means full loss of velocity.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/projectile/AirDragProperty.java",
                  "data": {
                    "air_drag": "multiplied to air speed each tick."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "arrow": {
                  "header": "Arrow Property",
                  "description": " The Arrow Property modifies the behavior of projectiles to simulate arrow-like characteristics. This includes  \nadjusting projectile hit behavior and properties when interacting with entities. For example, arrows may have  \nspecific behaviors such as sticking to targets or interacting differently with enchantments.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/projectile/ArrowProperty.java",
                  "data": {
                    "is_arrow": " Indicates whether the projectile behaves like an arrow, affecting its hit behavior and other attributes."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "channeling": {
                  "header": "Channeling Property",
                  "description": "  \nThe Channeling Property grants a modular projectile the channeling effect.  \nThis means it will strike lightning on a target when its rainstorming.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/projectile/ChannelingProperty.java",
                  "data": {
                    "channeling": " Indicates whether the projectile has the channeling effect applied."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "cryo": {
                  "header": "Cryo Property",
                  "description": "  \nThe Cryo Property causes modular projectiles to apply a Cryo effect to entities they hit. The strength and  \nduration of the Cryo effect are determined by the value of this property. The effect is only applied on arrow hits.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/projectile/CryoProperty.java",
                  "data": {
                    "cryo": " A double value representing the strength and duration of the Cryo effect. Higher values increase the effect's potency."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "enderpearl": {
                  "header": "Enderpearl Property",
                  "description": "  \nThe Enderpearl Property allows modular projectiles to mimic the teleportation behavior of ender pearls. When a  \nprojectile with this property hits an entity or block, it teleports the owner (if possible) to the point of impact,  \nsimilar to the effect of throwing an ender pearl.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/projectile/EnderpearlProperty.java",
                  "data": {
                    "is_enderpearl": " A boolean value that determines if the projectile behaves like an ender pearl."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "explosion": {
                  "header": "Explosion Property",
                  "description": "  \nThe Explosion Property makes a projectile explode upon hitting an entity or block. The explosion parameters such as  \nstrength, radius, and whether or not blocks are destroyed can be customized. The explosion may also affect entities  \nwith a configurable maximum damage and radius.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/projectile/ExplosionProperty.java",
                  "data": {
                    "explosion_projectile": " An instance of `ExplosionInfo`, containing the properties for explosion behavior.",
                    "`destroyBlocks`": " (optional) Whether blocks are destroyed by the explosion.",
                    "`chance`": " (optional) Probability of the explosion occurring upon impact.",
                    "`strength`": " Strength of the explosion.",
                    "`entityStrength`": " (optional) Damage multiplier for entities caught in the explosion.",
                    "`entityMaxDamage`": " (optional) Maximum damage the explosion can deal to entities.",
                    " `entityRadius`": " (optional) Radius of the explosion's effect on entities."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "crossbow_ammunition": {
                  "header": "Crossbow Shootable Property",
                  "description": "  \nThe Crossbow Shootable Property allows non-arrow items to be used as ammunition for crossbows. If this property is  \nset to true on an item, it can be fired from a crossbow.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/projectile/IsCrossbowShootAble.java",
                  "data": {
                    "crossbow_ammunition": " A boolean value indicating whether the item can be shot by a crossbow."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "rapid_fire_crossbow_delay": {
                  "header": "Rapid Fire Crossbow Delay Property",
                  "description": "  \nThe Rapid Fire Crossbow Delay Property controls the time delay between consecutive shots when using a crossbow  \nconfigured for rapid fire. The delay is specified as a double value, where lower values allow faster firing.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/projectile/MagazineCrossbowShotDelay.java",
                  "data": {
                    "rapid_fire_crossbow_delay": " A double value representing the time (in ticks) between consecutive shots."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "rapid_fire_crossbow": {
                  "header": "Rapid Fire Crossbow Property",
                  "description": "  \nThe Rapid Fire Crossbow Property controls how many projectiles can be loaded and fired from a modular crossbow in quick succession.  \nThe number of shots is determined by the property value, and additional projectiles can be loaded from the player's inventory.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/projectile/RapidfireCrossbowProperty.java",
                  "data": {
                    "rapid_fire_crossbow": " A double value representing the number of projectiles that can be shot."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "teleport_target": {
                  "header": "Teleport Target Projectile Property",
                  "description": "  \nThe Teleport Target Property adds the ability for projectiles to teleport any living entity they hit.  \nUpon impact, the entity is teleported using the same mechanic as consuming a chorus fruit.  \nIf the property is true, and the hit entity is a living entity, the teleportation occurs.  \nThe projectile is discarded after impact.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/projectile/TeleportTarget.java",
                  "data": {
                    "teleport_target": " A boolean value indicating whether the teleport behavior is enabled for the projectile."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "water_drag": {
                  "header": "Water Drag Property",
                  "description": "  \nThe water drag affects the speed loss of projectiles when they travel through water. The drag is represented as a double  \nvalue, where 1.0 means no speed loss and 0.0 means full loss of velocity in water.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/projectile/WaterDragProperty.java",
                  "data": {
                    "water_drag": " Multiplied to the projectile's speed each tick when underwater."
                  },
                  "key_words": [],
                  "sub_pages": {}
                }
              }
            },
            "rarity": {
              "header": "Rarity Property",
              "description": "  \nThe RarityProperty determines the rarity level of an item. This property can influence the rarity displayed for  \nitems in the game, affecting their default coloring, think of golden apples, totems and co.  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/RarityProperty.java",
              "data": {
                "rarity": " A {@link Rarity} value representing the item's rarity level. Rarity levels are typically"
              },
              "key_words": [],
              "sub_pages": {}
            },
            "repair_priority": {
              "header": "Repair Priority Property",
              "description": "  \nThe RepairPriority property controls the materials used to repair an item and assigns a priority value to these  \nmaterials. This value determines how effectively the item can be repaired using different materials.  \n *  \nThe priority value is a double, where a higher value represents a more effective repair material. The system  \nmaintains a list of materials that can be used for repair, and the highest priority material is used when  \nrepairing an item. If multiple materials have the same priority, all of them can be used interchangeably.  \n *  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/RepairPriority.java",
              "data": {
                "repair_priority": " A double value that determines the priority of repair materials for the item."
              },
              "key_words": [],
              "sub_pages": {}
            },
            "slot": {
              "sub_pages": {
                "allowed_in_slots": {
                  "header": "Allowed Slots Property",
                  "description": "  \nThe Allowed Slots Property controls where a module can be placed by defining which slot types it is compatible with.  \nA module can specify multiple slots by their IDs, ensuring that only certain modules can fit into designated slots  \nwhen assembling items. This helps define logical compatibility between modules and item slots.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/slot/AllowedSlots.java",
                  "data": {
                    "allowed_in_slots": " A list of strings representing the slot IDs where the module can be placed.",
                    "`slotId`": " (required) The ID of the slot that allows this module."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "allow_change_parent": {
                  "header": "Can Change Parent Module Property",
                  "description": "  \nThe Can Change Parent Module Property validates if a module's parent can be changed by checking specified conditions.  \nIf the conditions are not met, the change is disallowed, and a failure reason is communicated. This is particularly  \nimportant in crafting or upgrading scenarios where a module's placement or modification depends on parent-child  \nrelationships between modules.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/slot/CanChangeParentModule.java",
                  "data": {
                    "allow_change_parent": " A condition that determines whether a parent module can be changed.",
                    "`condition`": " The condition that must be met to allow changing the parent module."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "can_child_be_empty": {
                  "header": "Can Child Be Empty Property",
                  "description": "  \nThe Can Child Be Empty Property determines whether a child slot in a module can be left empty. This property is  \nuseful in crafting systems where some modules may allow their child slots to remain unoccupied, while others require  \nthem to be filled for proper functionality.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/slot/CanChildBeEmpty.java",
                  "data": {
                    "can_child_be_empty": " A boolean value indicating whether the child slot can be empty."
                  },
                  "key_words": [],
                  "sub_pages": {}
                },
                "slots": {
                  "header": "Slot Property",
                  "description": "  \nThe SlotProperty defines how modules handle submodule slots. Each slot can have attributes such as transformation,  \ntranslation key, and priority. Slots can also define allowed submodules and whether they can merge with others.  \nThe property provides methods to retrieve and manage slots within modules, including their transformation stacks and  \nallowed submodules.  \n",
                  "java": "common/src/main/java/smartin/miapi/modules/properties/slot/SlotProperty.java",
                  "data": {
                    "slots": " A map where keys are slot identifiers and values are {@link ModuleSlot} instances defining the slot's properties."
                  },
                  "key_words": [],
                  "sub_pages": {}
                }
              }
            },
            "slots": {
              "header": "Slot Properties",
              "description": "  \nProperties related to slot management  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/slot/SlotProperties.java",
              "data": {},
              "key_words": [],
              "sub_pages": {}
            },
            "tag": {
              "header": "Tag Property",
              "description": "  \nThe TagProperty allows modules to define and associate tags with themselves. These tags can be used  \nto categorize and identify modules based on their associated tags.  \n *  \nTags are represented as a list of strings and can be used to filter or group items and modules. For example,  \nyou could use tags to identify items that belong to a certain category or have specific properties, or to  \nfind modules that share common attributes.  \n *  \nTags are mostly meant to be targeted by synergies.  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/TagProperty.java",
              "data": {
                "tag": " A list of strings representing the tags associated with an item or module."
              },
              "key_words": [],
              "sub_pages": {}
            },
            "tool_or_weapon": {
              "header": "Tool or Weapon Property",
              "description": "  \nThe ToolOrWeaponProperty designates whether an item is classified as a tool or a weapon. This classification  \nprimarily affects how the item's durability is calculated and managed.  \n",
              "java": "common/src/main/java/smartin/miapi/modules/properties/ToolOrWeaponProperty.java",
              "data": {
                "is_weapon": " A boolean value indicating if the item is considered a weapon."
              },
              "key_words": [],
              "sub_pages": {}
            }
          }
        },
        "boolean_resolvable": {
          "header": "Boolean Resolvable",
          "description": "  \nThis is in concept just like a Double resolvable.  \nThis is regarded true if the outcome is > 0.  \nfalse is equivalent to 0, writing true in the json is the same as writing 1  \n",
          "java": "common/src/main/java/smartin/miapi/modules/properties/util/ComplexBooleanProperty.java",
          "data": {},
          "key_words": [
            "BooleanResolvable",
            "BooleanResolvable"
          ],
          "sub_pages": {}
        },
        "double_resolvable": {
          "header": "Double Resolvable",
          "description": " this is a complex way to describe a number  \nin short this number allows you to do math like \"sin(5)\"  \nbut it also allows you to reference certain other numbers, for more information see StatResolver  \nthis allows you to do stuff like \"[material.hardness]*5\" as a number  \n",
          "java": "common/src/main/java/smartin/miapi/modules/properties/util/DoubleOperationResolvable.java",
          "data": {},
          "key_words": [
            "DoubleResolvable",
            "DoubleResolvable"
          ],
          "sub_pages": {}
        }
      }
    }
  }
}